{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Parallel Tally Center (PTC) System\n\n## Overview\n\nThe Parallel Tally Center (PTC) System is a secure election management platform designed for collecting, verifying, and monitoring election results in real-time. The system enables election agents to submit polling center results with supporting documentation, while supervisors and administrators can verify submissions and monitor the election process through comprehensive dashboards and reporting tools.\n\nThe application serves as a critical infrastructure component for election transparency, providing role-based access control, real-time result aggregation, audit trails, and secure file management for election verification documents.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern component patterns\n- **Routing**: Wouter for lightweight client-side routing with role-based page access\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives with Tailwind CSS for consistent styling\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server framework\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Authentication**: OpenID Connect integration with Replit Auth for secure user authentication\n- **Session Management**: Express sessions with PostgreSQL storage using connect-pg-simple\n- **File Uploads**: Multer middleware for handling election verification documents\n- **Real-time Communication**: WebSocket server for live dashboard updates and notifications\n\n### Database Design\n- **User Management**: Role-based system with agent, supervisor, and admin roles\n- **Election Data**: Polling centers, candidates, and results with vote tallies\n- **File Management**: Secure storage for result verification documents (images, PDFs)\n- **Audit System**: Comprehensive logging of all user actions and system changes\n- **Session Storage**: Persistent session management for user authentication state\n\n### Authentication & Authorization\n- **Custom Authentication**: Standard login with email/phone and password\n- **Role-Based Access**: Three-tier permission system (agent, supervisor, admin)  \n- **Password Security**: Bcrypt hashing with salt rounds for secure password storage\n- **Session Security**: HTTP-only cookies with secure session storage\n- **Route Protection**: Middleware-based access control for API endpoints and frontend routes\n- **Auto-seeding**: Automatic creation of default admin account and sample data\n\n### Real-time Features\n- **Live Dashboard**: WebSocket-powered real-time updates for election statistics\n- **Status Notifications**: Instant updates when results are submitted or verified\n- **Multi-user Coordination**: Real-time synchronization across multiple user sessions\n\n## External Dependencies\n\n### Database Services\n- **PostgreSQL**: Primary database for all application data with Neon Database as the hosted provider\n- **Drizzle ORM**: Type-safe database operations with automatic migration management\n\n### Authentication Services\n- **Custom Authentication**: Email/phone + password authentication with bcrypt hashing\n- **Connect-PG-Simple**: PostgreSQL session store for persistent user sessions\n\n### UI & Styling\n- **Shadcn/ui**: Pre-built accessible UI components based on Radix UI primitives\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Radix UI**: Headless UI components for accessibility and keyboard navigation\n- **Lucide React**: Icon library for consistent iconography\n\n### Development & Build Tools\n- **Vite**: Fast build tool with hot module replacement for development\n- **TypeScript**: Static type checking for both frontend and backend code\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n### File Management\n- **Multer**: File upload middleware with support for images and PDF documents\n- **File System Storage**: Local file storage for verification documents with size and type validation\n\n### Utility Libraries\n- **React Hook Form**: Form management with validation using Zod schemas\n- **Date-fns**: Date manipulation and formatting utilities\n- **Class Variance Authority**: Type-safe CSS class composition\n- **React Dropzone**: Drag-and-drop file upload interface","size_bytes":4492},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          50: \"var(--primary-50)\",\n          500: \"var(--primary-500)\",\n          600: \"var(--primary-600)\",\n          700: \"var(--primary-700)\",\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          50: \"var(--secondary-50)\",\n          500: \"var(--secondary-500)\",\n          600: \"var(--secondary-600)\",\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          500: \"var(--accent-500)\",\n          600: \"var(--accent-600)\",\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        status: {\n          verified: \"var(--status-verified)\",\n          pending: \"var(--status-pending)\",\n          flagged: \"var(--status-flagged)\",\n        },\n      },\n      fontFamily: {\n        inter: [\"var(--font-inter)\"],\n        sans: [\"var(--font-inter)\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2806},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated, hashPassword, validateRegister, validateLogin } from \"./auth\";\nimport passport from \"passport\";\nimport { insertResultSchema, insertPollingCenterSchema, insertCandidateSchema } from \"@shared/schema\";\nimport { seedDatabase } from \"./seed\";\n\n// Configure multer for file uploads\nconst uploadDir = path.join(process.cwd(), \"uploads\");\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir, { recursive: true });\n}\n\nconst upload = multer({\n  dest: uploadDir,\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = /jpeg|jpg|png|pdf/;\n    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n    const mimetype = allowedTypes.test(file.mimetype);\n    \n    if (mimetype && extname) {\n      return cb(null, true);\n    } else {\n      cb(new Error(\"Only images (JPEG, JPG, PNG) and PDF files are allowed\"));\n    }\n  },\n});\n\n// WebSocket connections store\nconst wsConnections = new Set<WebSocket>();\n\n// Broadcast real-time updates to all connected clients\nfunction broadcastUpdate(type: string, data: any) {\n  const message = JSON.stringify({\n    type,\n    data,\n    timestamp: new Date().toISOString(),\n  });\n\n  wsConnections.forEach((ws) => {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(message);\n    }\n  });\n}\n\n// Analytics helper to get real-time stats\nasync function getRealTimeAnalytics() {\n  try {\n    const stats = await storage.getStats();\n    const recentSubmissions = await storage.getRecentSubmissions(10);\n    const verificationQueue = await storage.getPendingVerifications();\n    const topPerformingCenters = await storage.getTopPerformingCenters(5);\n    const hourlySubmissions = await storage.getHourlySubmissionTrends();\n\n    return {\n      overview: stats,\n      recentActivity: recentSubmissions,\n      pendingVerifications: verificationQueue.length,\n      topCenters: topPerformingCenters,\n      submissionTrends: hourlySubmissions,\n      lastUpdated: new Date().toISOString(),\n    };\n  } catch (error) {\n    console.error('Error getting real-time analytics:', error);\n    return null;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Seed database on startup\n  await seedDatabase();\n\n  // Admin routes\n  app.get('/api/admin/pending-users', isAuthenticated, async (req: any, res) => {\n    if (req.user?.role !== 'admin') {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n    try {\n      const pendingUsers = await storage.getPendingUsers();\n      res.json(pendingUsers);\n    } catch (error) {\n      console.error(\"Error fetching pending users:\", error);\n      res.status(500).json({ message: \"Failed to fetch pending users\" });\n    }\n  });\n\n  app.post('/api/admin/approve-user/:userId', isAuthenticated, async (req: any, res) => {\n    if (req.user?.role !== 'admin') {\n      return res.status(403).json({ message: \"Admin access required\" });\n    }\n    try {\n      const { userId } = req.params;\n      const approvedUser = await storage.approveUser(userId);\n      res.json(approvedUser);\n    } catch (error) {\n      console.error(\"Error approving user:\", error);\n      res.status(500).json({ message: \"Failed to approve user\" });\n    }\n  });\n\n  // Auth routes\n  app.post('/api/register', async (req, res) => {\n    try {\n      const userData = validateRegister(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByIdentifier(userData.email || userData.phone || '');\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists with this email or phone\" });\n      }\n\n      // Hash password and create user\n      const passwordHash = await hashPassword(userData.password);\n      const user = await storage.createUser({\n        email: userData.email || undefined,\n        phone: userData.phone || undefined,\n        firstName: userData.firstName || '',\n        lastName: userData.lastName || '',\n        passwordHash,\n      });\n\n      // Remove password hash from response\n      const { passwordHash: _, ...userResponse } = user;\n      res.status(201).json(userResponse);\n    } catch (error: any) {\n      console.error(\"Registration error:\", error);\n      res.status(400).json({ message: error.message || \"Registration failed\" });\n    }\n  });\n\n  app.post('/api/login', (req, res, next) => {\n    try {\n      validateLogin(req.body);\n      \n      passport.authenticate('local', (err: any, user: any, info: any) => {\n        if (err) {\n          return res.status(500).json({ message: \"Login failed\" });\n        }\n        if (!user) {\n          return res.status(401).json({ message: info?.message || \"Invalid credentials\" });\n        }\n        \n        req.logIn(user, (err) => {\n          if (err) {\n            return res.status(500).json({ message: \"Login failed\" });\n          }\n          // Remove password hash from response\n          const { passwordHash, ...userResponse } = user;\n          res.json(userResponse);\n        });\n      })(req, res, next);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Invalid request\" });\n    }\n  });\n\n  app.post('/api/logout', (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = req.user;\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      // Remove password hash from response\n      const { passwordHash, ...userResponse } = user;\n      res.json(userResponse);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/stats\", isAuthenticated, async (req, res) => {\n    try {\n      const stats = await storage.getStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch statistics\" });\n    }\n  });\n\n  // Real-time analytics endpoint\n  app.get(\"/api/analytics\", isAuthenticated, async (req, res) => {\n    try {\n      const analytics = await getRealTimeAnalytics();\n      if (analytics) {\n        res.json(analytics);\n      } else {\n        res.status(500).json({ message: \"Failed to fetch analytics\" });\n      }\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  // Polling centers\n  app.get(\"/api/polling-centers\", isAuthenticated, async (req, res) => {\n    try {\n      const centers = await storage.getPollingCenters();\n      res.json(centers);\n    } catch (error) {\n      console.error(\"Error fetching polling centers:\", error);\n      res.status(500).json({ message: \"Failed to fetch polling centers\" });\n    }\n  });\n\n  app.post(\"/api/polling-centers\", isAuthenticated, async (req: any, res) => {\n    try {\n      // Only admins can create polling centers\n      const user = req.user;\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const validatedData = insertPollingCenterSchema.parse(req.body);\n      const center = await storage.createPollingCenter(validatedData);\n      \n      // Log audit\n      await storage.createAuditLog({\n        userId: req.user.id,\n        action: \"CREATE\",\n        entityType: \"polling_center\",\n        entityId: center.id,\n        newValues: center,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.status(201).json(center);\n    } catch (error) {\n      console.error(\"Error creating polling center:\", error);\n      res.status(400).json({ message: \"Failed to create polling center\" });\n    }\n  });\n\n  // Candidates\n  app.get(\"/api/candidates\", isAuthenticated, async (req, res) => {\n    try {\n      const candidates = await storage.getCandidates();\n      res.json(candidates);\n    } catch (error) {\n      console.error(\"Error fetching candidates:\", error);\n      res.status(500).json({ message: \"Failed to fetch candidates\" });\n    }\n  });\n\n  app.post(\"/api/candidates\", isAuthenticated, async (req: any, res) => {\n    try {\n      // Only admins can create candidates\n      const user = req.user;\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const validatedData = insertCandidateSchema.parse(req.body);\n      const candidate = await storage.createCandidate(validatedData);\n      res.status(201).json(candidate);\n    } catch (error) {\n      console.error(\"Error creating candidate:\", error);\n      res.status(400).json({ message: \"Failed to create candidate\" });\n    }\n  });\n\n  // Results\n  app.get(\"/api/results\", isAuthenticated, async (req, res) => {\n    try {\n      const { status } = req.query;\n      let results;\n      \n      if (status) {\n        results = await storage.getResultsByStatus(status as any);\n      } else {\n        results = await storage.getResults();\n      }\n      \n      res.json(results);\n    } catch (error) {\n      console.error(\"Error fetching results:\", error);\n      res.status(500).json({ message: \"Failed to fetch results\" });\n    }\n  });\n\n  app.post(\"/api/results\", isAuthenticated, upload.array('files', 10), async (req: any, res) => {\n    try {\n      const validatedData = insertResultSchema.parse({\n        ...req.body,\n        presidentialVotes: req.body.presidentialVotes ? JSON.parse(req.body.presidentialVotes) : null,\n        mpVotes: req.body.mpVotes ? JSON.parse(req.body.mpVotes) : null,\n        councilorVotes: req.body.councilorVotes ? JSON.parse(req.body.councilorVotes) : null,\n        invalidVotes: parseInt(req.body.invalidVotes),\n        submittedBy: req.user.id,\n      });\n\n      const result = await storage.createResult(validatedData);\n\n      // Handle file uploads\n      if (req.files && req.files.length > 0) {\n        for (const file of req.files) {\n          await storage.createResultFile({\n            resultId: result.id,\n            fileName: file.originalname,\n            filePath: file.path,\n            fileSize: file.size,\n            mimeType: file.mimetype,\n          });\n        }\n      }\n\n      // Log audit\n      await storage.createAuditLog({\n        userId: req.user.id,\n        action: \"CREATE\",\n        entityType: \"result\",\n        entityId: result.id,\n        newValues: result,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      // Broadcast real-time updates\n      broadcastUpdate(\"NEW_RESULT\", result);\n      \n      // Get and broadcast updated analytics\n      const analytics = await getRealTimeAnalytics();\n      if (analytics) {\n        broadcastUpdate(\"ANALYTICS_UPDATE\", analytics);\n      }\n\n      res.status(201).json(result);\n    } catch (error) {\n      console.error(\"Error creating result:\", error);\n      res.status(400).json({ message: \"Failed to create result\" });\n    }\n  });\n\n  // Verify/approve results\n  app.patch(\"/api/results/:id/status\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = req.user;\n      if (user?.role !== 'supervisor' && user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied. Supervisor or admin role required.\" });\n      }\n\n      const { status, flaggedReason } = req.body;\n      const resultId = req.params.id;\n\n      const updatedResult = await storage.updateResultStatus(\n        resultId,\n        status,\n        req.user.id,\n        flaggedReason\n      );\n\n      // Log audit\n      await storage.createAuditLog({\n        userId: req.user.id,\n        action: \"UPDATE\",\n        entityType: \"result\",\n        entityId: resultId,\n        newValues: { status, verifiedBy: req.user.id, flaggedReason },\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      // Broadcast real-time updates\n      broadcastUpdate(\"RESULT_STATUS_CHANGED\", updatedResult);\n      \n      // Get and broadcast updated analytics\n      const analytics = await getRealTimeAnalytics();\n      if (analytics) {\n        broadcastUpdate(\"ANALYTICS_UPDATE\", analytics);\n      }\n\n      res.json(updatedResult);\n    } catch (error) {\n      console.error(\"Error updating result status:\", error);\n      res.status(400).json({ message: \"Failed to update result status\" });\n    }\n  });\n\n  // User management (admin only)\n  app.get(\"/api/users\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = req.user;\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.patch(\"/api/users/:id/role\", isAuthenticated, async (req: any, res) => {\n    try {\n      const currentUser = await storage.getUser(req.user.id);\n      if (currentUser?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const { role } = req.body;\n      const userId = req.params.id;\n\n      const updatedUser = await storage.updateUserRole(userId, role);\n\n      // Log audit\n      await storage.createAuditLog({\n        userId: req.user.id,\n        action: \"UPDATE\",\n        entityType: \"user\",\n        entityId: userId,\n        newValues: { role },\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user role:\", error);\n      res.status(400).json({ message: \"Failed to update user role\" });\n    }\n  });\n\n  // Audit logs\n  app.get(\"/api/audit-logs\", isAuthenticated, async (req: any, res) => {\n    try {\n      const user = req.user;\n      if (user?.role !== 'admin' && user?.role !== 'supervisor') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const logs = await storage.getAuditLogs();\n      res.json(logs);\n    } catch (error) {\n      console.error(\"Error fetching audit logs:\", error);\n      res.status(500).json({ message: \"Failed to fetch audit logs\" });\n    }\n  });\n\n  // File serving\n  app.get(\"/api/files/:filename\", isAuthenticated, (req, res) => {\n    const filename = req.params.filename;\n    const filePath = path.join(uploadDir, filename);\n    \n    if (fs.existsSync(filePath)) {\n      res.sendFile(filePath);\n    } else {\n      res.status(404).json({ message: \"File not found\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time updates\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  // Periodic analytics broadcast (every 30 seconds)\n  setInterval(async () => {\n    if (wsConnections.size > 0) {\n      const analytics = await getRealTimeAnalytics();\n      if (analytics) {\n        broadcastUpdate('ANALYTICS_UPDATE', analytics);\n      }\n    }\n  }, 30000);\n\n  wss.on('connection', (ws) => {\n    console.log('New WebSocket connection');\n    wsConnections.add(ws);\n\n    ws.on('message', async (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        \n        if (data.type === 'REQUEST_ANALYTICS') {\n          const analytics = await getRealTimeAnalytics();\n          if (analytics && ws.readyState === WebSocket.OPEN) {\n            ws.send(JSON.stringify({\n              type: 'ANALYTICS_UPDATE',\n              data: analytics,\n              timestamp: new Date().toISOString(),\n            }));\n          }\n        }\n      } catch (error) {\n        console.error('Error handling WebSocket message:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      console.log('WebSocket connection closed');\n      wsConnections.delete(ws);\n    });\n\n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n      wsConnections.delete(ws);\n    });\n\n    // Send initial analytics\n    getRealTimeAnalytics().then(analytics => {\n      if (analytics && ws.readyState === WebSocket.OPEN) {\n        ws.send(JSON.stringify({\n          type: \"ANALYTICS_UPDATE\",\n          data: analytics,\n          timestamp: new Date().toISOString(),\n        }));\n      }\n    });\n  });\n\n  return httpServer;\n}\n","size_bytes":16742},"server/storage.ts":{"content":"import {\n  users,\n  pollingCenters,\n  candidates,\n  results,\n  resultFiles,\n  auditLogs,\n  type User,\n  type UpsertUser,\n  type PollingCenter,\n  type InsertPollingCenter,\n  type Candidate,\n  type InsertCandidate,\n  type Result,\n  type InsertResult,\n  type ResultWithRelations,\n  type ResultFile,\n  type InsertResultFile,\n  type AuditLog,\n  type InsertAuditLog,\n  type UserRole,\n  type ResultStatus,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, count, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByIdentifier(identifier: string): Promise<User | undefined>;\n  createUser(user: { email?: string; phone?: string; firstName: string; lastName: string; passwordHash: string }): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n  updateUserRole(userId: string, role: UserRole): Promise<User>;\n  updateLastLogin(userId: string): Promise<void>;\n  \n  // Polling center operations\n  getPollingCenters(): Promise<PollingCenter[]>;\n  getPollingCenter(id: string): Promise<PollingCenter | undefined>;\n  createPollingCenter(center: InsertPollingCenter): Promise<PollingCenter>;\n  \n  // Candidate operations\n  getCandidates(): Promise<Candidate[]>;\n  createCandidate(candidate: InsertCandidate): Promise<Candidate>;\n  \n  // Result operations\n  getResults(): Promise<ResultWithRelations[]>;\n  getResultsByStatus(status: ResultStatus): Promise<ResultWithRelations[]>;\n  getResultsByPollingCenter(pollingCenterId: string): Promise<ResultWithRelations[]>;\n  createResult(result: InsertResult): Promise<Result>;\n  updateResultStatus(resultId: string, status: ResultStatus, verifiedBy?: string, flaggedReason?: string): Promise<Result>;\n  \n  // Result file operations\n  createResultFile(file: InsertResultFile): Promise<ResultFile>;\n  getResultFiles(resultId: string): Promise<ResultFile[]>;\n  \n  // Statistics\n  getStats(): Promise<{\n    totalCenters: number;\n    resultsReceived: number;\n    verified: number;\n    flagged: number;\n    completionRate: number;\n    verificationRate: number;\n  }>;\n\n  // Analytics operations for real-time dashboard\n  getRecentSubmissions(limit: number): Promise<any[]>;\n  getPendingVerifications(): Promise<any[]>;\n  getTopPerformingCenters(limit: number): Promise<Array<{\n    pollingCenter: PollingCenter;\n    submissionCount: number;\n    verificationRate: number;\n  }>>;\n  getHourlySubmissionTrends(): Promise<Array<{\n    hour: string;\n    submissions: number;\n    verifications: number;\n  }>>;\n  \n  // Audit operations\n  createAuditLog(log: InsertAuditLog): Promise<AuditLog>;\n  getAuditLogs(limit?: number): Promise<AuditLog[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByIdentifier(identifier: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(\n      or(eq(users.email, identifier), eq(users.phone, identifier))\n    );\n    return user;\n  }\n\n  async createUser(userData: { email?: string; phone?: string; firstName: string; lastName: string; passwordHash: string }): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async updateLastLogin(userId: string): Promise<void> {\n    await db.update(users).set({ lastLoginAt: new Date() }).where(eq(users.id, userId));\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.isActive, true)).orderBy(desc(users.createdAt));\n  }\n\n  async updateUserRole(userId: string, role: UserRole): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ role, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async approveUser(userId: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ isApproved: true, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async getPendingUsers(): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.isApproved, false));\n  }\n\n  // Polling center operations\n  async getPollingCenters(): Promise<PollingCenter[]> {\n    return await db.select().from(pollingCenters).where(eq(pollingCenters.isActive, true));\n  }\n\n  async getPollingCenter(id: string): Promise<PollingCenter | undefined> {\n    const [center] = await db.select().from(pollingCenters).where(eq(pollingCenters.id, id));\n    return center;\n  }\n\n  async createPollingCenter(center: InsertPollingCenter): Promise<PollingCenter> {\n    const [newCenter] = await db.insert(pollingCenters).values(center).returning();\n    return newCenter;\n  }\n\n  // Candidate operations\n  async getCandidates(): Promise<Candidate[]> {\n    return await db.select().from(candidates).where(eq(candidates.isActive, true));\n  }\n\n  async createCandidate(candidate: InsertCandidate): Promise<Candidate> {\n    const [newCandidate] = await db.insert(candidates).values(candidate).returning();\n    return newCandidate;\n  }\n\n  // Result operations\n  async getResults(): Promise<ResultWithRelations[]> {\n    return await db\n      .select()\n      .from(results)\n      .leftJoin(pollingCenters, eq(results.pollingCenterId, pollingCenters.id))\n      .leftJoin(users, eq(results.submittedBy, users.id))\n      .orderBy(desc(results.createdAt))\n      .then(rows => \n        rows.map(row => ({\n          ...row.results,\n          pollingCenter: row.polling_centers!,\n          submitter: row.users!,\n          verifier: undefined,\n          files: []\n        }))\n      );\n  }\n\n  async getResultsByStatus(status: ResultStatus): Promise<ResultWithRelations[]> {\n    return await db\n      .select()\n      .from(results)\n      .leftJoin(pollingCenters, eq(results.pollingCenterId, pollingCenters.id))\n      .leftJoin(users, eq(results.submittedBy, users.id))\n      .where(eq(results.status, status))\n      .orderBy(desc(results.createdAt))\n      .then(rows => \n        rows.map(row => ({\n          ...row.results,\n          pollingCenter: row.polling_centers!,\n          submitter: row.users!,\n          verifier: undefined,\n          files: []\n        }))\n      );\n  }\n\n  async getResultsByPollingCenter(pollingCenterId: string): Promise<ResultWithRelations[]> {\n    return await db\n      .select()\n      .from(results)\n      .leftJoin(pollingCenters, eq(results.pollingCenterId, pollingCenters.id))\n      .leftJoin(users, eq(results.submittedBy, users.id))\n      .where(eq(results.pollingCenterId, pollingCenterId))\n      .orderBy(desc(results.createdAt))\n      .then(rows => \n        rows.map(row => ({\n          ...row.results,\n          pollingCenter: row.polling_centers!,\n          submitter: row.users!,\n          verifier: undefined,\n          files: []\n        }))\n      );\n  }\n\n  async createResult(result: InsertResult): Promise<Result> {\n    // Calculate total votes from all categories\n    let totalVotes = result.invalidVotes;\n    \n    if (result.presidentialVotes) {\n      const presidentialTotal = Object.values(result.presidentialVotes as Record<string, number>).reduce((sum, votes) => sum + votes, 0);\n      totalVotes += presidentialTotal;\n    }\n    \n    if (result.mpVotes) {\n      const mpTotal = Object.values(result.mpVotes as Record<string, number>).reduce((sum, votes) => sum + votes, 0);\n      totalVotes += mpTotal;\n    }\n    \n    if (result.councilorVotes) {\n      const councilorTotal = Object.values(result.councilorVotes as Record<string, number>).reduce((sum, votes) => sum + votes, 0);\n      totalVotes += councilorTotal;\n    }\n\n    const [newResult] = await db\n      .insert(results)\n      .values({ ...result, totalVotes })\n      .returning();\n    return newResult;\n  }\n\n  async updateResultStatus(\n    resultId: string, \n    status: ResultStatus, \n    verifiedBy?: string, \n    flaggedReason?: string\n  ): Promise<Result> {\n    const updateData: any = { \n      status, \n      updatedAt: new Date() \n    };\n    \n    if (verifiedBy) {\n      updateData.verifiedBy = verifiedBy;\n      updateData.verifiedAt = new Date();\n    }\n    \n    if (flaggedReason) {\n      updateData.flaggedReason = flaggedReason;\n    }\n\n    const [updatedResult] = await db\n      .update(results)\n      .set(updateData)\n      .where(eq(results.id, resultId))\n      .returning();\n    return updatedResult;\n  }\n\n  // Result file operations\n  async createResultFile(file: InsertResultFile): Promise<ResultFile> {\n    const [newFile] = await db.insert(resultFiles).values(file).returning();\n    return newFile;\n  }\n\n  async getResultFiles(resultId: string): Promise<ResultFile[]> {\n    return await db.select().from(resultFiles).where(eq(resultFiles.resultId, resultId));\n  }\n\n  // Statistics\n  async getStats(): Promise<{\n    totalCenters: number;\n    resultsReceived: number;\n    verified: number;\n    flagged: number;\n    completionRate: number;\n    verificationRate: number;\n  }> {\n    const [totalCentersResult] = await db\n      .select({ count: count() })\n      .from(pollingCenters)\n      .where(eq(pollingCenters.isActive, true));\n\n    const [resultsReceivedResult] = await db\n      .select({ count: count() })\n      .from(results);\n\n    const [verifiedResult] = await db\n      .select({ count: count() })\n      .from(results)\n      .where(eq(results.status, 'verified'));\n\n    const [flaggedResult] = await db\n      .select({ count: count() })\n      .from(results)\n      .where(eq(results.status, 'flagged'));\n\n    const totalCenters = totalCentersResult.count;\n    const resultsReceived = resultsReceivedResult.count;\n    const verified = verifiedResult.count;\n    const flagged = flaggedResult.count;\n\n    return {\n      totalCenters,\n      resultsReceived,\n      verified,\n      flagged,\n      completionRate: totalCenters > 0 ? (resultsReceived / totalCenters) * 100 : 0,\n      verificationRate: resultsReceived > 0 ? (verified / resultsReceived) * 100 : 0,\n    };\n  }\n\n  // Audit operations\n  async createAuditLog(log: InsertAuditLog): Promise<AuditLog> {\n    const [newLog] = await db.insert(auditLogs).values(log).returning();\n    return newLog;\n  }\n\n  async getAuditLogs(limit = 100): Promise<AuditLog[]> {\n    return await db\n      .select()\n      .from(auditLogs)\n      .orderBy(desc(auditLogs.createdAt))\n      .limit(limit);\n  }\n\n  // Analytics operations for real-time dashboard\n  async getRecentSubmissions(limit: number): Promise<ResultWithRelations[]> {\n    return await db.select()\n      .from(results)\n      .leftJoin(pollingCenters, eq(results.pollingCenterId, pollingCenters.id))\n      .leftJoin(users, eq(results.submittedBy, users.id))\n      .orderBy(desc(results.createdAt))\n      .limit(limit) as any[];\n  }\n\n  async getPendingVerifications(): Promise<ResultWithRelations[]> {\n    return await db.select()\n      .from(results)\n      .leftJoin(pollingCenters, eq(results.pollingCenterId, pollingCenters.id))\n      .leftJoin(users, eq(results.submittedBy, users.id))\n      .where(eq(results.status, 'pending'))\n      .orderBy(desc(results.createdAt)) as any[];\n  }\n\n  async getTopPerformingCenters(limit: number): Promise<Array<{\n    pollingCenter: PollingCenter;\n    submissionCount: number;\n    verificationRate: number;\n  }>> {\n    const centerStats = await db.select({\n      pollingCenter: pollingCenters,\n      submissionCount: count(results.id).as('submissionCount'),\n      verifiedCount: sql<number>`COUNT(CASE WHEN ${results.status} = 'verified' THEN 1 END)`.as('verifiedCount'),\n    })\n      .from(pollingCenters)\n      .leftJoin(results, eq(pollingCenters.id, results.pollingCenterId))\n      .groupBy(pollingCenters.id)\n      .orderBy(desc(count(results.id)))\n      .limit(limit);\n\n    return centerStats.map(stat => ({\n      pollingCenter: stat.pollingCenter,\n      submissionCount: stat.submissionCount,\n      verificationRate: stat.submissionCount > 0 ? (stat.verifiedCount / stat.submissionCount) * 100 : 0,\n    }));\n  }\n\n  async getHourlySubmissionTrends(): Promise<Array<{\n    hour: string;\n    submissions: number;\n    verifications: number;\n  }>> {\n    const trends = await db.select({\n      hour: sql<string>`TO_CHAR(${results.createdAt}, 'YYYY-MM-DD HH24:00')`.as('hour'),\n      submissions: count(results.id).as('submissions'),\n      verifications: sql<number>`COUNT(CASE WHEN ${results.status} = 'verified' THEN 1 END)`.as('verifications'),\n    })\n      .from(results)\n      .where(sql`${results.createdAt} >= NOW() - INTERVAL '24 hours'`)\n      .groupBy(sql`TO_CHAR(${results.createdAt}, 'YYYY-MM-DD HH24:00')`)\n      .orderBy(sql`TO_CHAR(${results.createdAt}, 'YYYY-MM-DD HH24:00')`);\n\n    return trends;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":13136},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User roles enum\nexport const userRoleEnum = pgEnum('user_role', ['agent', 'supervisor', 'admin']);\n\n// Result status enum  \nexport const resultStatusEnum = pgEnum('result_status', ['pending', 'verified', 'flagged', 'rejected']);\n\n// Submission channel enum\nexport const submissionChannelEnum = pgEnum('submission_channel', ['whatsapp', 'portal', 'both']);\n\n// Candidate category enum\nexport const candidateCategoryEnum = pgEnum('candidate_category', ['president', 'mp', 'councilor']);\n\n// User storage table.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  phone: varchar(\"phone\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  passwordHash: varchar(\"password_hash\").notNull(),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: userRoleEnum(\"role\").default('agent').notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  emailVerified: boolean(\"email_verified\").default(false).notNull(),\n  phoneVerified: boolean(\"phone_verified\").default(false).notNull(),\n  isApproved: boolean(\"is_approved\").default(false).notNull(),\n  lastLoginAt: timestamp(\"last_login_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Polling centers table\nexport const pollingCenters = pgTable(\"polling_centers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\").unique().notNull(),\n  name: varchar(\"name\").notNull(),\n  constituency: varchar(\"constituency\").notNull(),\n  district: varchar(\"district\").notNull(),\n  state: varchar(\"state\").notNull(),\n  registeredVoters: integer(\"registered_voters\").notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Candidates table\nexport const candidates = pgTable(\"candidates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  party: varchar(\"party\").notNull(),\n  category: candidateCategoryEnum(\"category\").notNull(),\n  constituency: varchar(\"constituency\"), // For MPs and Councilors\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Results table\nexport const results = pgTable(\"results\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pollingCenterId: varchar(\"polling_center_id\").references(() => pollingCenters.id).notNull(),\n  submittedBy: varchar(\"submitted_by\").references(() => users.id).notNull(),\n  verifiedBy: varchar(\"verified_by\").references(() => users.id),\n  category: candidateCategoryEnum(\"category\").notNull(),\n  \n  // Presidential votes\n  presidentialVotes: jsonb(\"presidential_votes\"), // {candidateId: votes}\n  \n  // MP votes  \n  mpVotes: jsonb(\"mp_votes\"), // {candidateId: votes}\n  \n  // Councilor votes\n  councilorVotes: jsonb(\"councilor_votes\"), // {candidateId: votes}\n  \n  invalidVotes: integer(\"invalid_votes\").notNull(),\n  totalVotes: integer(\"total_votes\").notNull(),\n  status: resultStatusEnum(\"status\").default('pending').notNull(),\n  submissionChannel: submissionChannelEnum(\"submission_channel\").notNull(),\n  comments: text(\"comments\"),\n  flaggedReason: text(\"flagged_reason\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  verifiedAt: timestamp(\"verified_at\"),\n});\n\n// Result files table (for uploaded photos)\nexport const resultFiles = pgTable(\"result_files\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  resultId: varchar(\"result_id\").references(() => results.id).notNull(),\n  fileName: varchar(\"file_name\").notNull(),\n  filePath: varchar(\"file_path\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  mimeType: varchar(\"mime_type\").notNull(),\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow(),\n});\n\n// Audit logs table\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  action: varchar(\"action\").notNull(),\n  entityType: varchar(\"entity_type\").notNull(),\n  entityId: varchar(\"entity_id\").notNull(),\n  oldValues: jsonb(\"old_values\"),\n  newValues: jsonb(\"new_values\"),\n  ipAddress: varchar(\"ip_address\"),\n  userAgent: varchar(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  submittedResults: many(results, { relationName: \"submittedBy\" }),\n  verifiedResults: many(results, { relationName: \"verifiedBy\" }),\n  auditLogs: many(auditLogs),\n}));\n\nexport const pollingCentersRelations = relations(pollingCenters, ({ many }) => ({\n  results: many(results),\n}));\n\nexport const resultsRelations = relations(results, ({ one, many }) => ({\n  pollingCenter: one(pollingCenters, {\n    fields: [results.pollingCenterId],\n    references: [pollingCenters.id],\n  }),\n  submitter: one(users, {\n    fields: [results.submittedBy],\n    references: [users.id],\n    relationName: \"submittedBy\",\n  }),\n  verifier: one(users, {\n    fields: [results.verifiedBy],\n    references: [users.id],\n    relationName: \"verifiedBy\",\n  }),\n  files: many(resultFiles),\n}));\n\nexport const resultFilesRelations = relations(resultFiles, ({ one }) => ({\n  result: one(results, {\n    fields: [resultFiles.resultId],\n    references: [results.id],\n  }),\n}));\n\nexport const auditLogsRelations = relations(auditLogs, ({ one }) => ({\n  user: one(users, {\n    fields: [auditLogs.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  passwordHash: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const registerUserSchema = createInsertSchema(users).pick({\n  email: true,\n  phone: true,\n  firstName: true,\n  lastName: true,\n}).extend({\n  password: z.string().min(8, \"Password must be at least 8 characters long\"),\n});\n\nexport const loginSchema = z.object({\n  identifier: z.string().min(1, \"Email or phone is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport const upsertUserSchema = createInsertSchema(users).omit({\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPollingCenterSchema = createInsertSchema(pollingCenters).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCandidateSchema = createInsertSchema(candidates).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertResultSchema = createInsertSchema(results).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  verifiedAt: true,\n});\n\nexport const insertResultFileSchema = createInsertSchema(resultFiles).omit({\n  id: true,\n  uploadedAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type PollingCenter = typeof pollingCenters.$inferSelect;\nexport type InsertPollingCenter = z.infer<typeof insertPollingCenterSchema>;\nexport type Candidate = typeof candidates.$inferSelect;\nexport type InsertCandidate = z.infer<typeof insertCandidateSchema>;\nexport type Result = typeof results.$inferSelect;\nexport type InsertResult = z.infer<typeof insertResultSchema>;\nexport type ResultFile = typeof resultFiles.$inferSelect;\nexport type InsertResultFile = z.infer<typeof insertResultFileSchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\n\n// Extended types with relations\nexport type ResultWithRelations = Result & {\n  pollingCenter: PollingCenter;\n  submitter: User;\n  verifier?: User;\n  files: ResultFile[];\n};\n\nexport type UserRole = 'agent' | 'supervisor' | 'admin';\nexport type ResultStatus = 'pending' | 'verified' | 'flagged' | 'rejected';\nexport type SubmissionChannel = 'whatsapp' | 'portal' | 'both';\nexport type CandidateCategory = 'president' | 'mp' | 'councilor';\n","size_bytes":8754},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport SubmitResults from \"@/pages/submit-results\";\nimport VerifyResults from \"@/pages/verify-results\";\nimport Reports from \"@/pages/reports\";\nimport UserManagement from \"@/pages/user-management\";\nimport AuditTrail from \"@/pages/audit-trail\";\nimport AdminManagement from \"@/pages/admin-management\";\nimport Navigation from \"@/components/navigation\";\nimport Sidebar from \"@/components/sidebar\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <div className=\"min-h-screen bg-gray-50\">\n            <Navigation />\n            <div className=\"flex\">\n              <Sidebar />\n              <main className=\"flex-1 p-6\">\n                <Switch>\n                  <Route path=\"/\" component={Dashboard} />\n                  <Route path=\"/submit-results\" component={SubmitResults} />\n                  <Route path=\"/verify-results\" component={VerifyResults} />\n                  <Route path=\"/reports\" component={Reports} />\n                  <Route path=\"/user-management\" component={UserManagement} />\n                  <Route path=\"/admin-management\" component={AdminManagement} />\n                  <Route path=\"/audit-trail\" component={AuditTrail} />\n                  <Route component={NotFound} />\n                </Switch>\n              </main>\n            </div>\n          </div>\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2260},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(212.4 100% 50%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  \n  /* PTC Custom Colors */\n  --primary-50: hsl(212 100% 96%);\n  --primary-500: hsl(212 85% 42%);\n  --primary-600: hsl(212 87% 46%);\n  --primary-700: hsl(212 84% 40%);\n  \n  --secondary-50: hsl(122 39% 94%);\n  --secondary-500: hsl(122 39% 49%);\n  --secondary-600: hsl(122 43% 54%);\n  \n  --accent-500: hsl(37 91% 55%);\n  --accent-600: hsl(35 91% 62%);\n  \n  --status-verified: hsl(122 39% 49%);\n  --status-pending: hsl(37 91% 55%);\n  --status-flagged: hsl(0 84% 60%);\n  \n  --font-inter: 'Inter', sans-serif;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-inter);\n  }\n}\n\n@layer utilities {\n  .status-verified {\n    @apply bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200;\n  }\n  \n  .status-pending {\n    @apply bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200;\n  }\n  \n  .status-flagged {\n    @apply bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200;\n  }\n  \n  .status-rejected {\n    @apply bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200;\n  }\n}\n","size_bytes":3111},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/file-upload.tsx":{"content":"import { useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { CloudUpload, X, FileImage } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface FileUploadProps {\n  files: File[];\n  onFilesChange: (files: File[]) => void;\n  maxFiles?: number;\n  maxSize?: number;\n}\n\nexport default function FileUpload({ \n  files, \n  onFilesChange, \n  maxFiles = 10, \n  maxSize = 10 * 1024 * 1024 // 10MB \n}: FileUploadProps) {\n  \n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    const newFiles = [...files, ...acceptedFiles].slice(0, maxFiles);\n    onFilesChange(newFiles);\n  }, [files, onFilesChange, maxFiles]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'image/*': ['.jpeg', '.jpg', '.png'],\n      'application/pdf': ['.pdf']\n    },\n    maxSize,\n    multiple: true,\n  });\n\n  const removeFile = (index: number) => {\n    const newFiles = files.filter((_, i) => i !== index);\n    onFilesChange(newFiles);\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div>\n      <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n        Upload Result Sheet Photos\n      </label>\n      \n      <div\n        {...getRootProps()}\n        className={cn(\n          \"border-2 border-dashed rounded-lg p-6 text-center cursor-pointer transition-colors\",\n          isDragActive \n            ? \"border-primary-400 bg-primary-50\" \n            : \"border-gray-300 hover:border-primary-400\"\n        )}\n        data-testid=\"file-upload-dropzone\"\n      >\n        <input {...getInputProps()} />\n        <CloudUpload className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n        <p className=\"text-sm text-gray-600 mb-2\">\n          <span className=\"font-medium text-primary-600 hover:text-primary-500\">\n            Click to upload\n          </span> \n          {\" \"}or drag and drop\n        </p>\n        <p className=\"text-xs text-gray-500\">PNG, JPG, PDF up to {formatFileSize(maxSize)} each</p>\n      </div>\n\n      {files.length > 0 && (\n        <div className=\"mt-4 space-y-2\">\n          <h4 className=\"text-sm font-medium text-gray-700\">Selected Files:</h4>\n          {files.map((file, index) => (\n            <Card key={index} className=\"p-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <FileImage className=\"h-5 w-5 text-gray-400\" />\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900\" data-testid={`file-name-${index}`}>\n                      {file.name}\n                    </p>\n                    <p className=\"text-xs text-gray-500\" data-testid={`file-size-${index}`}>\n                      {formatFileSize(file.size)}\n                    </p>\n                  </div>\n                </div>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => removeFile(index)}\n                  data-testid={`button-remove-file-${index}`}\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":3597},"client/src/components/navigation.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Vote } from \"lucide-react\";\nimport { User } from \"@shared/schema\";\n\nexport default function Navigation() {\n  const { user } = useAuth() as { user: User | null };\n\n  return (\n    <nav className=\"bg-white shadow-sm border-b border-gray-200\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between h-16\">\n          <div className=\"flex items-center\">\n            <div className=\"w-8 h-8 bg-primary-500 rounded-full flex items-center justify-center mr-3\">\n              <Vote className=\"text-white h-4 w-4\" />\n            </div>\n            <h1 className=\"text-xl font-semibold text-gray-900\" data-testid=\"text-app-title\">\n              PTC System\n            </h1>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            {/* Real-time Status Indicator */}\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" data-testid=\"indicator-live-status\"></div>\n              <span className=\"text-sm text-gray-600\">Live</span>\n            </div>\n            \n            {/* User Menu */}\n            <div className=\"flex items-center space-x-2\">\n              <img \n                className=\"w-8 h-8 rounded-full bg-primary-100\" \n                src={user?.profileImageUrl || `https://ui-avatars.com/api/?name=${user?.firstName}+${user?.lastName}&background=1565c0&color=fff`}\n                alt=\"User avatar\"\n                data-testid=\"img-user-avatar\"\n              />\n              <span className=\"text-sm font-medium text-gray-700\" data-testid=\"text-user-name\">\n                {user?.firstName} {user?.lastName}\n              </span>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={async () => {\n                  try {\n                    await fetch(\"/api/logout\", { method: \"POST\" });\n                    window.location.href = \"/login\";\n                  } catch (error) {\n                    console.error(\"Logout failed:\", error);\n                    window.location.href = \"/login\";\n                  }\n                }}\n                data-testid=\"button-logout\"\n              >\n                Logout\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":2454},"client/src/components/real-time-analytics.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { useWebSocket } from '@/hooks/useWebSocket';\nimport { useQuery } from '@tanstack/react-query';\nimport { Activity, Users, CheckCircle, AlertTriangle, Clock, TrendingUp } from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';\n\nexport function RealTimeAnalytics() {\n  const { analytics, isConnected, requestAnalytics } = useWebSocket();\n  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());\n\n  // Fetch initial analytics\n  const { data: initialAnalytics, isLoading } = useQuery({\n    queryKey: ['/api/analytics'],\n    refetchInterval: 30000, // Fallback refresh every 30 seconds\n  });\n\n  // Use WebSocket analytics if available, otherwise use query data\n  const currentAnalytics = analytics || initialAnalytics || {};\n\n  useEffect(() => {\n    if (isConnected) {\n      requestAnalytics();\n      setLastUpdate(new Date());\n    }\n  }, [isConnected, requestAnalytics]);\n\n  useEffect(() => {\n    if (analytics) {\n      setLastUpdate(new Date());\n    }\n  }, [analytics]);\n\n  if (isLoading && !currentAnalytics) {\n    return (\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i} data-testid={`analytics-skeleton-${i}`}>\n            <CardHeader className=\"space-y-0 pb-2\">\n              <div className=\"h-4 bg-muted animate-pulse rounded\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-8 bg-muted animate-pulse rounded mb-2\" />\n              <div className=\"h-3 bg-muted animate-pulse rounded w-2/3\" />\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  const stats = currentAnalytics?.overview;\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"real-time-analytics\">\n      {/* Connection Status */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <div className={`w-3 h-3 rounded-full ${isConnected ? 'bg-green-500 animate-pulse' : 'bg-red-500'}`} />\n          <span className=\"text-sm text-muted-foreground\">\n            {isConnected ? 'Live Updates Active' : 'Connecting...'}\n          </span>\n        </div>\n        <div className=\"text-xs text-muted-foreground\">\n          Last updated: {formatDistanceToNow(lastUpdate)} ago\n        </div>\n      </div>\n\n      {/* Overview Stats */}\n      {stats && (\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          <Card data-testid=\"stat-total-centers\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Centers</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.totalCenters}</div>\n              <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                <Progress value={stats.completionRate} className=\"w-full h-1\" />\n                <span>{stats.completionRate.toFixed(1)}% reporting</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-results-received\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Results Received</CardTitle>\n              <Activity className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{stats.resultsReceived}</div>\n              <p className=\"text-xs text-muted-foreground\">\n                +{(currentAnalytics as any)?.recentActivity?.length || 0} in last hour\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-verified\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Verified</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">{stats.verified}</div>\n              <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                <Progress value={stats.verificationRate} className=\"w-full h-1\" />\n                <span>{stats.verificationRate.toFixed(1)}% verified</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-pending\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Pending Review</CardTitle>\n              <Clock className=\"h-4 w-4 text-yellow-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-yellow-600\">\n                {(currentAnalytics as any)?.pendingVerifications || 0}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                {stats.flagged} flagged for attention\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Charts Section */}\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        {/* Submission Trends */}\n        {(currentAnalytics as any)?.submissionTrends && (\n          <Card data-testid=\"submission-trends-chart\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"h-5 w-5\" />\n                24-Hour Submission Trends\n              </CardTitle>\n              <CardDescription>Submissions and verifications by hour</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <LineChart data={(currentAnalytics as any).submissionTrends}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis \n                    dataKey=\"hour\" \n                    tickFormatter={(value) => new Date(value).toLocaleTimeString([], {hour: '2-digit'})}\n                  />\n                  <YAxis />\n                  <Tooltip \n                    labelFormatter={(value) => new Date(value).toLocaleString()}\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"submissions\" \n                    stroke=\"#8884d8\" \n                    strokeWidth={2}\n                    name=\"Submissions\"\n                  />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"verifications\" \n                    stroke=\"#82ca9d\" \n                    strokeWidth={2}\n                    name=\"Verifications\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Top Performing Centers */}\n        {(currentAnalytics as any)?.topCenters && (\n          <Card data-testid=\"top-centers-chart\">\n            <CardHeader>\n              <CardTitle>Top Performing Centers</CardTitle>\n              <CardDescription>Centers with highest submission rates</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={(currentAnalytics as any).topCenters}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis \n                    dataKey=\"pollingCenter.name\" \n                    tick={{ fontSize: 12 }}\n                    interval={0}\n                    angle={-45}\n                    textAnchor=\"end\"\n                  />\n                  <YAxis />\n                  <Tooltip />\n                  <Bar \n                    dataKey=\"submissionCount\" \n                    fill=\"#8884d8\" \n                    name=\"Submissions\"\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Recent Activity Feed */}\n      {(currentAnalytics as any)?.recentActivity && (\n        <Card data-testid=\"recent-activity-feed\">\n          <CardHeader>\n            <CardTitle>Recent Activity</CardTitle>\n            <CardDescription>Live feed of latest submissions and verifications</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n              {((currentAnalytics as any).recentActivity || []).slice(0, 10).map((activity: any, index: number) => (\n                <div \n                  key={activity.id || index} \n                  className=\"flex items-center justify-between border-b pb-2\"\n                  data-testid={`activity-item-${index}`}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"flex-shrink-0\">\n                      {activity.status === 'verified' && (\n                        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                      )}\n                      {activity.status === 'pending' && (\n                        <Clock className=\"h-4 w-4 text-yellow-600\" />\n                      )}\n                      {activity.status === 'flagged' && (\n                        <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                      )}\n                    </div>\n                    <div className=\"min-w-0 flex-1\">\n                      <p className=\"text-sm font-medium truncate\">\n                        {activity.pollingCenter?.name || 'Unknown Center'}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {activity.candidate?.name || 'Unknown Candidate'} - {activity.votes} votes\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2 text-right\">\n                    <Badge \n                      variant={\n                        activity.status === 'verified' ? 'default' : \n                        activity.status === 'flagged' ? 'destructive' : 'secondary'\n                      }\n                    >\n                      {activity.status}\n                    </Badge>\n                    <span className=\"text-xs text-muted-foreground\">\n                      {formatDistanceToNow(new Date(activity.createdAt))} ago\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":11056},"client/src/components/recent-submissions.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Clock, AlertTriangle, Check } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface RecentSubmissionsProps {\n  results?: any[];\n}\n\nexport default function RecentSubmissions({ results }: RecentSubmissionsProps) {\n  // Get the 5 most recent submissions\n  const recentResults = results?.slice(0, 5) || [];\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Clock className=\"h-4 w-4 text-yellow-600\" />;\n      case 'flagged':\n        return <AlertTriangle className=\"h-4 w-4 text-red-600\" />;\n      case 'verified':\n        return <Check className=\"h-4 w-4 text-green-600\" />;\n      default:\n        return <Clock className=\"h-4 w-4 text-gray-600\" />;\n    }\n  };\n\n  const getStatusBadgeClass = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return 'status-pending';\n      case 'flagged':\n        return 'status-flagged';\n      case 'verified':\n        return 'status-verified';\n      case 'rejected':\n        return 'status-rejected';\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <Card className=\"border shadow-sm\">\n      <CardHeader className=\"border-b\">\n        <CardTitle data-testid=\"text-recent-submissions-title\">Recent Submissions</CardTitle>\n        <p className=\"text-sm text-gray-600\">Latest result submissions requiring review</p>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {recentResults.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            No recent submissions\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {recentResults.map((result: any) => (\n              <div key={result.id} className=\"flex items-start space-x-3 p-3 bg-gray-50 rounded-lg\">\n                <div className=\"flex-shrink-0\">\n                  <div className=\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center\">\n                    {getStatusIcon(result.status)}\n                  </div>\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center justify-between\">\n                    <p className=\"text-sm font-medium text-gray-900\" data-testid={`submission-center-${result.id}`}>\n                      {result.pollingCenter?.code || 'Unknown Center'}\n                    </p>\n                    <span className=\"text-xs text-gray-500\" data-testid={`submission-time-${result.id}`}>\n                      {formatDistanceToNow(new Date(result.createdAt), { addSuffix: true })}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-gray-600\" data-testid={`submission-submitter-${result.id}`}>\n                    Submitted by {result.submitter?.firstName} {result.submitter?.lastName}\n                  </p>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    <Badge className={getStatusBadgeClass(result.status)} data-testid={`submission-status-${result.id}`}>\n                      {result.status.charAt(0).toUpperCase() + result.status.slice(1)}\n                    </Badge>\n                    <span className=\"text-xs text-gray-500\">\n                      {result.submissionChannel}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        <div className=\"mt-4\">\n          <Button\n            variant=\"outline\"\n            className=\"w-full\"\n            data-testid=\"button-view-all-submissions\"\n          >\n            View All Submissions\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3855},"client/src/components/result-submission-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport FileUpload from \"./file-upload\";\nimport { NotebookPen, Save } from \"lucide-react\";\n\nconst formSchema = z.object({\n  pollingCenterId: z.string().min(1, \"Polling center is required\"),\n  category: z.enum([\"president\", \"mp\", \"councilor\"]),\n  presidentialVotes: z.record(z.coerce.number().min(0)).optional(),\n  mpVotes: z.record(z.coerce.number().min(0)).optional(),\n  councilorVotes: z.record(z.coerce.number().min(0)).optional(),\n  invalidVotes: z.coerce.number().min(0, \"Invalid votes must be non-negative\"),\n  submissionChannel: z.enum([\"whatsapp\", \"portal\", \"both\"]),\n  comments: z.string().optional(),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nexport default function ResultSubmissionForm() {\n  const { toast } = useToast();\n  const [files, setFiles] = useState<File[]>([]);\n\n  const { data: pollingCenters } = useQuery({\n    queryKey: [\"/api/polling-centers\"],\n  });\n\n  const { data: candidates } = useQuery({\n    queryKey: [\"/api/candidates\"],\n  });\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      pollingCenterId: \"\",\n      category: \"president\",\n      presidentialVotes: {},\n      mpVotes: {},\n      councilorVotes: {},\n      invalidVotes: 0,\n      submissionChannel: \"portal\",\n      comments: \"\",\n    },\n  });\n\n  const submitMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const formData = new FormData();\n      \n      // Append form data\n      Object.entries(data).forEach(([key, value]) => {\n        if (typeof value === 'object' && value !== null) {\n          formData.append(key, JSON.stringify(value));\n        } else {\n          formData.append(key, value.toString());\n        }\n      });\n      \n      // Append files\n      files.forEach(file => {\n        formData.append('files', file);\n      });\n\n      const response = await fetch('/api/results', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        const text = await response.text();\n        throw new Error(`${response.status}: ${text}`);\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Results submitted successfully\",\n      });\n      form.reset();\n      setFiles([]);\n      queryClient.invalidateQueries({ queryKey: [\"/api/results\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit results\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    submitMutation.mutate(data);\n  };\n\n  const handleSaveDraft = () => {\n    // TODO: Implement save draft functionality\n    toast({\n      title: \"Draft Saved\",\n      description: \"Your progress has been saved as a draft\",\n    });\n  };\n\n  return (\n    <Card className=\"border shadow-sm\">\n      <CardHeader className=\"border-b\">\n        <CardTitle data-testid=\"text-submission-form-title\">Submit New Results</CardTitle>\n        <p className=\"text-sm text-gray-600\">Enter polling center results and upload verification documents</p>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"pollingCenterId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Polling Center</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-polling-center\">\n                          <SelectValue placeholder=\"Select polling center\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {pollingCenters && Array.isArray(pollingCenters) && pollingCenters.map((center: any) => (\n                          <SelectItem key={center.id} value={center.id}>\n                            {center.code} - {center.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"submissionChannel\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Submission Channel</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-submission-channel\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"portal\">Portal Only</SelectItem>\n                        <SelectItem value=\"whatsapp\">WhatsApp Only</SelectItem>\n                        <SelectItem value=\"both\">Both Channels</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"border rounded-lg p-4\">\n              <h4 className=\"text-md font-medium text-gray-900 mb-4\">Candidate Results</h4>\n              <FormField\n                control={form.control}\n                name=\"category\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Election Category</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value} data-testid=\"select-category\">\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select election category\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"president\">Presidential</SelectItem>\n                        <SelectItem value=\"mp\">Members of Parliament (MP)</SelectItem>\n                        <SelectItem value=\"councilor\">Councilors</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Candidate Votes Section */}\n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium\">Candidate Votes</h4>\n                \n                {/* Presidential Candidates */}\n                {form.watch(\"category\") === \"president\" && (\n                  <div className=\"space-y-3\">\n                    <h5 className=\"text-sm font-medium text-gray-700\">Presidential Candidates</h5>\n                    {candidates && Array.isArray(candidates) && candidates.filter((c: any) => c.category === \"president\").map((candidate: any) => (\n                      <FormField\n                        key={candidate.id}\n                        control={form.control}\n                        name={`presidentialVotes.${candidate.id}`}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-sm\">\n                              {candidate.name} ({candidate.party})\n                            </FormLabel>\n                            <FormControl>\n                              <Input type=\"number\" min=\"0\" {...field} data-testid={`input-votes-${candidate.id}`} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    ))}\n                  </div>\n                )}\n\n                {/* MP Candidates */}\n                {form.watch(\"category\") === \"mp\" && (\n                  <div className=\"space-y-3\">\n                    <h5 className=\"text-sm font-medium text-gray-700\">MP Candidates</h5>\n                    {candidates && Array.isArray(candidates) && candidates.filter((c: any) => c.category === \"mp\").map((candidate: any) => (\n                      <FormField\n                        key={candidate.id}\n                        control={form.control}\n                        name={`mpVotes.${candidate.id}`}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-sm\">\n                              {candidate.name} ({candidate.party}) - {candidate.constituency}\n                            </FormLabel>\n                            <FormControl>\n                              <Input type=\"number\" min=\"0\" {...field} data-testid={`input-votes-${candidate.id}`} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    ))}\n                  </div>\n                )}\n\n                {/* Councilor Candidates */}\n                {form.watch(\"category\") === \"councilor\" && (\n                  <div className=\"space-y-3\">\n                    <h5 className=\"text-sm font-medium text-gray-700\">Councilor Candidates</h5>\n                    {candidates && Array.isArray(candidates) && candidates.filter((c: any) => c.category === \"councilor\").map((candidate: any) => (\n                      <FormField\n                        key={candidate.id}\n                        control={form.control}\n                        name={`councilorVotes.${candidate.id}`}\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-sm\">\n                              {candidate.name} ({candidate.party}) - {candidate.constituency}\n                            </FormLabel>\n                            <FormControl>\n                              <Input type=\"number\" min=\"0\" {...field} data-testid={`input-votes-${candidate.id}`} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    ))}\n                  </div>\n                )}\n              </div>\n              \n              <div className=\"mt-4\">\n                <FormField\n                  control={form.control}\n                  name=\"invalidVotes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Invalid Votes</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" min=\"0\" className=\"w-full md:w-1/3\" {...field} data-testid=\"input-invalid-votes\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            <FileUpload files={files} onFilesChange={setFiles} />\n\n            <FormField\n              control={form.control}\n              name=\"comments\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Additional Comments</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Any observations or issues during the voting process...\"\n                      {...field}\n                      data-testid=\"textarea-comments\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex items-center space-x-4\">\n              <Button \n                type=\"submit\" \n                disabled={submitMutation.isPending}\n                className=\"bg-primary-500 hover:bg-primary-600\"\n                data-testid=\"button-submit-results\"\n              >\n                <NotebookPen className=\"h-4 w-4 mr-2\" />\n                {submitMutation.isPending ? \"Submitting...\" : \"Submit Results\"}\n              </Button>\n              <Button \n                type=\"button\" \n                variant=\"outline\"\n                onClick={handleSaveDraft}\n                data-testid=\"button-save-draft\"\n              >\n                <Save className=\"h-4 w-4 mr-2\" />\n                Save as Draft\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":13972},"client/src/components/results-chart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function ResultsChart() {\n  const { data: results } = useQuery({\n    queryKey: [\"/api/results\"],\n  });\n\n  // Calculate candidate totals from all verified results\n  const calculateTotals = () => {\n    if (!results) return { candidateA: 0, candidateB: 0, candidateC: 0, total: 0 };\n\n    const verifiedResults = results.filter((r: any) => r.status === 'verified');\n    \n    const totals = verifiedResults.reduce(\n      (acc: any, result: any) => ({\n        candidateA: acc.candidateA + result.candidateAVotes,\n        candidateB: acc.candidateB + result.candidateBVotes,\n        candidateC: acc.candidateC + result.candidateCVotes,\n      }),\n      { candidateA: 0, candidateB: 0, candidateC: 0 }\n    );\n\n    const total = totals.candidateA + totals.candidateB + totals.candidateC;\n\n    return {\n      ...totals,\n      total,\n      candidateAPercentage: total > 0 ? (totals.candidateA / total) * 100 : 0,\n      candidateBPercentage: total > 0 ? (totals.candidateB / total) * 100 : 0,\n      candidateCPercentage: total > 0 ? (totals.candidateC / total) * 100 : 0,\n    };\n  };\n\n  const totals = calculateTotals();\n\n  return (\n    <Card className=\"border shadow-sm\">\n      <CardHeader className=\"border-b\">\n        <CardTitle data-testid=\"text-results-chart-title\">National Results</CardTitle>\n        <p className=\"text-sm text-gray-600\">Current leading candidates (verified results only)</p>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-4 h-4 bg-blue-500 rounded-full\"></div>\n              <span className=\"font-medium\">Candidate A</span>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"font-bold text-lg\" data-testid=\"votes-candidate-a\">\n                {totals.candidateA.toLocaleString()}\n              </div>\n              <div className=\"text-sm text-gray-500\" data-testid=\"percentage-candidate-a\">\n                {totals.candidateAPercentage.toFixed(1)}%\n              </div>\n            </div>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <div \n              className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\" \n              style={{ width: `${totals.candidateAPercentage}%` }}\n            ></div>\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-4 h-4 bg-green-500 rounded-full\"></div>\n              <span className=\"font-medium\">Candidate B</span>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"font-bold text-lg\" data-testid=\"votes-candidate-b\">\n                {totals.candidateB.toLocaleString()}\n              </div>\n              <div className=\"text-sm text-gray-500\" data-testid=\"percentage-candidate-b\">\n                {totals.candidateBPercentage.toFixed(1)}%\n              </div>\n            </div>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <div \n              className=\"bg-green-500 h-2 rounded-full transition-all duration-300\" \n              style={{ width: `${totals.candidateBPercentage}%` }}\n            ></div>\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-4 h-4 bg-yellow-500 rounded-full\"></div>\n              <span className=\"font-medium\">Candidate C</span>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"font-bold text-lg\" data-testid=\"votes-candidate-c\">\n                {totals.candidateC.toLocaleString()}\n              </div>\n              <div className=\"text-sm text-gray-500\" data-testid=\"percentage-candidate-c\">\n                {totals.candidateCPercentage.toFixed(1)}%\n              </div>\n            </div>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <div \n              className=\"bg-yellow-500 h-2 rounded-full transition-all duration-300\" \n              style={{ width: `${totals.candidateCPercentage}%` }}\n            ></div>\n          </div>\n        </div>\n\n        <div className=\"mt-6 pt-6 border-t\">\n          <div className=\"flex justify-between text-sm\">\n            <span className=\"text-gray-600\">Total Verified Votes:</span>\n            <span className=\"font-semibold\" data-testid=\"total-verified-votes\">\n              {totals.total.toLocaleString()}\n            </span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4881},"client/src/components/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  BarChart3, \n  Plus, \n  CheckCircle, \n  FileText, \n  Users, \n  History,\n  Settings\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: BarChart3, roles: [\"agent\", \"supervisor\", \"admin\"] },\n  { name: \"Submit Results\", href: \"/submit-results\", icon: Plus, roles: [\"agent\", \"supervisor\", \"admin\"] },\n  { name: \"Verify Results\", href: \"/verify-results\", icon: CheckCircle, roles: [\"supervisor\", \"admin\"] },\n  { name: \"Reports\", href: \"/reports\", icon: FileText, roles: [\"supervisor\", \"admin\"] },\n  { name: \"User Management\", href: \"/user-management\", icon: Users, roles: [\"admin\"] },\n  { name: \"Admin Management\", href: \"/admin-management\", icon: Settings, roles: [\"admin\"] },\n  { name: \"Audit Trail\", href: \"/audit-trail\", icon: History, roles: [\"supervisor\", \"admin\"] },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n\n  const filteredNavigation = navigation.filter(item => \n    item.roles.includes(user?.role || \"agent\")\n  );\n\n  return (\n    <aside className=\"w-64 bg-white shadow-sm h-screen\">\n      <div className=\"p-4\">\n        <div className=\"space-y-1\">\n          {filteredNavigation.map((item) => {\n            const isActive = location === item.href;\n            return (\n              <Link key={item.name} href={item.href}>\n                <a\n                  className={cn(\n                    \"group flex items-center px-3 py-2 text-sm font-medium rounded-md transition-colors\",\n                    isActive\n                      ? \"bg-primary-50 text-primary-700\"\n                      : \"text-gray-700 hover:bg-gray-50\"\n                  )}\n                  data-testid={`link-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <item.icon\n                    className={cn(\n                      \"mr-3 h-5 w-5\",\n                      isActive ? \"text-primary-500\" : \"text-gray-400\"\n                    )}\n                  />\n                  {item.name}\n                </a>\n              </Link>\n            );\n          })}\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":2249},"client/src/components/stats-overview.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Building, CheckCircle, Shield, Flag } from \"lucide-react\";\n\ninterface StatsOverviewProps {\n  stats?: {\n    totalCenters: number;\n    resultsReceived: number;\n    verified: number;\n    flagged: number;\n    completionRate: number;\n    verificationRate: number;\n  };\n}\n\nexport default function StatsOverview({ stats }: StatsOverviewProps) {\n  if (!stats) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"h-16 bg-gray-200 rounded\"></div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      <Card className=\"border shadow-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600\">Total Polling Centers</p>\n              <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-total-centers\">\n                {stats.totalCenters.toLocaleString()}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n              <Building className=\"h-6 w-6 text-blue-600\" />\n            </div>\n          </div>\n          <div className=\"mt-2 flex items-center text-sm\">\n            <span className=\"text-green-600 font-medium\">100%</span>\n            <span className=\"text-gray-500 ml-1\">registered</span>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"border shadow-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600\">Results Received</p>\n              <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-results-received\">\n                {stats.resultsReceived.toLocaleString()}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n              <CheckCircle className=\"h-6 w-6 text-green-600\" />\n            </div>\n          </div>\n          <div className=\"mt-2 flex items-center text-sm\">\n            <span className=\"text-green-600 font-medium\" data-testid=\"stat-completion-rate\">\n              {stats.completionRate.toFixed(1)}%\n            </span>\n            <span className=\"text-gray-500 ml-1\">completion</span>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"border shadow-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600\">Verified Results</p>\n              <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-verified\">\n                {stats.verified.toLocaleString()}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n              <Shield className=\"h-6 w-6 text-green-600\" />\n            </div>\n          </div>\n          <div className=\"mt-2 flex items-center text-sm\">\n            <span className=\"text-green-600 font-medium\" data-testid=\"stat-verification-rate\">\n              {stats.verificationRate.toFixed(1)}%\n            </span>\n            <span className=\"text-gray-500 ml-1\">verified</span>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"border shadow-sm\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600\">Flagged Items</p>\n              <p className=\"text-2xl font-bold text-gray-900\" data-testid=\"stat-flagged\">\n                {stats.flagged.toLocaleString()}\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n              <Flag className=\"h-6 w-6 text-red-600\" />\n            </div>\n          </div>\n          <div className=\"mt-2 flex items-center text-sm\">\n            <span className=\"text-red-600 font-medium\">\n              {stats.totalCenters > 0 ? ((stats.flagged / stats.totalCenters) * 100).toFixed(1) : 0}%\n            </span>\n            <span className=\"text-gray-500 ml-1\">need review</span>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4638},"client/src/components/verification-interface.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Check, X, Eye, CheckCircle, Image } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport default function VerificationInterface() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const { data: pendingResults, isLoading } = useQuery({\n    queryKey: [\"/api/results\", \"pending\"],\n    queryFn: () => fetch(\"/api/results?status=pending\", { credentials: \"include\" }).then(res => res.json()),\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ resultId, status, flaggedReason }: { \n      resultId: string; \n      status: string; \n      flaggedReason?: string; \n    }) => {\n      await apiRequest(\"PATCH\", `/api/results/${resultId}/status`, { status, flaggedReason });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/results\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"Result status updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update result status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Only supervisors and admins can verify results\n  if (user?.role !== 'supervisor' && user?.role !== 'admin') {\n    return (\n      <div className=\"text-center py-8\">\n        <p className=\"text-gray-600\">You need supervisor or administrator privileges to verify results.</p>\n      </div>\n    );\n  }\n\n  const handleApprove = (resultId: string) => {\n    updateStatusMutation.mutate({ resultId, status: \"verified\" });\n  };\n\n  const handleReject = (resultId: string) => {\n    const reason = prompt(\"Please provide a reason for rejection:\");\n    if (reason) {\n      updateStatusMutation.mutate({ resultId, status: \"rejected\", flaggedReason: reason });\n    }\n  };\n\n  const handleFlag = (resultId: string) => {\n    const reason = prompt(\"Please provide a reason for flagging:\");\n    if (reason) {\n      updateStatusMutation.mutate({ resultId, status: \"flagged\", flaggedReason: reason });\n    }\n  };\n\n  return (\n    <Card className=\"border shadow-sm\">\n      <CardHeader className=\"border-b\">\n        <CardTitle data-testid=\"text-verification-queue-title\">Verification Queue</CardTitle>\n        <p className=\"text-sm text-gray-600\">Review and verify submitted results</p>\n      </CardHeader>\n      <CardContent className=\"p-6\">\n        {isLoading ? (\n          <div className=\"text-center py-8\">Loading verification queue...</div>\n        ) : pendingResults && pendingResults.length > 0 ? (\n          <div className=\"space-y-4\">\n            {pendingResults.map((result: any) => (\n              <div key={result.id} className=\"border rounded-lg p-4 hover:bg-gray-50 transition-colors\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <h4 className=\"font-medium text-gray-900\" data-testid={`verification-center-${result.id}`}>\n                        {result.pollingCenter?.code || 'Unknown Center'}\n                      </h4>\n                      <Badge className=\"status-pending\" data-testid={`verification-status-${result.id}`}>\n                        Pending Review\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm mb-3\">\n                      <div>\n                        <p className=\"text-gray-600 mb-1\">Submission Details:</p>\n                        <div className=\"bg-gray-100 p-2 rounded\">\n                          <p data-testid={`verification-votes-${result.id}`}>\n                            A: {result.candidateAVotes} | B: {result.candidateBVotes} | C: {result.candidateCVotes}\n                          </p>\n                          <p className=\"text-xs text-gray-500 mt-1\" data-testid={`verification-submitter-${result.id}`}>\n                            Submitted by {result.submitter?.firstName} {result.submitter?.lastName} - {formatDistanceToNow(new Date(result.createdAt), { addSuffix: true })}\n                          </p>\n                        </div>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600 mb-1\">Total Votes:</p>\n                        <div className=\"bg-gray-100 p-2 rounded\">\n                          <p data-testid={`verification-total-${result.id}`}>\n                            Valid: {result.candidateAVotes + result.candidateBVotes + result.candidateCVotes}\n                          </p>\n                          <p data-testid={`verification-invalid-${result.id}`}>\n                            Invalid: {result.invalidVotes}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"flex items-center space-x-1\">\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                        <span className=\"text-sm text-green-700\">Data Complete</span>\n                      </div>\n                      {result.files && result.files.length > 0 && (\n                        <div className=\"flex items-center space-x-1\">\n                          <Image className=\"h-4 w-4 text-blue-500\" />\n                          <span className=\"text-sm text-blue-700\">\n                            {result.files.length} Photo{result.files.length !== 1 ? 's' : ''} Attached\n                          </span>\n                        </div>\n                      )}\n                      <Badge variant=\"outline\" data-testid={`verification-channel-${result.id}`}>\n                        {result.submissionChannel}\n                      </Badge>\n                    </div>\n\n                    {result.comments && (\n                      <div className=\"mt-2 text-sm text-gray-600\" data-testid={`verification-comments-${result.id}`}>\n                        <strong>Comments:</strong> {result.comments}\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex-shrink-0 ml-4\">\n                    <div className=\"flex flex-col space-y-2\">\n                      <Button \n                        onClick={() => handleApprove(result.id)}\n                        disabled={updateStatusMutation.isPending}\n                        className=\"bg-green-500 hover:bg-green-600 text-white text-sm\"\n                        data-testid={`button-approve-${result.id}`}\n                      >\n                        <Check className=\"h-4 w-4 mr-1\" />\n                        Approve\n                      </Button>\n                      <Button \n                        onClick={() => handleReject(result.id)}\n                        disabled={updateStatusMutation.isPending}\n                        className=\"bg-red-500 hover:bg-red-600 text-white text-sm\"\n                        data-testid={`button-reject-${result.id}`}\n                      >\n                        <X className=\"h-4 w-4 mr-1\" />\n                        Reject\n                      </Button>\n                      <Button \n                        onClick={() => handleFlag(result.id)}\n                        disabled={updateStatusMutation.isPending}\n                        className=\"bg-yellow-500 hover:bg-yellow-600 text-white text-sm\"\n                        data-testid={`button-flag-${result.id}`}\n                      >\n                        <Eye className=\"h-4 w-4 mr-1\" />\n                        Flag\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-8 text-gray-500\">\n            No results pending verification\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8803},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/hooks/useWebSocket.ts":{"content":"import { useState, useEffect, useRef, useCallback } from 'react';\n\ninterface WebSocketMessage {\n  type: string;\n  data: any;\n  timestamp: string;\n}\n\ninterface RealTimeAnalytics {\n  overview: {\n    totalCenters: number;\n    resultsReceived: number;\n    verified: number;\n    flagged: number;\n    completionRate: number;\n    verificationRate: number;\n  };\n  recentActivity: any[];\n  pendingVerifications: number;\n  topCenters: any[];\n  submissionTrends: any[];\n  lastUpdated: string;\n}\n\nexport function useWebSocket() {\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n  const [analytics, setAnalytics] = useState<RealTimeAnalytics | null>(null);\n  const [recentSubmissions, setRecentSubmissions] = useState<any[]>([]);\n  const wsRef = useRef<WebSocket | null>(null);\n\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    const connect = () => {\n      try {\n        const ws = new WebSocket(wsUrl);\n        wsRef.current = ws;\n\n        ws.onopen = () => {\n          console.log('WebSocket connected');\n          setIsConnected(true);\n        };\n\n        ws.onmessage = (event) => {\n          try {\n            const message: WebSocketMessage = JSON.parse(event.data);\n            setLastMessage(message);\n            \n            // Handle different message types\n            switch (message.type) {\n              case 'ANALYTICS_UPDATE':\n                setAnalytics(message.data);\n                break;\n              case 'NEW_RESULT':\n                setRecentSubmissions(prev => [message.data, ...prev.slice(0, 9)]);\n                break;\n              case 'RESULT_STATUS_CHANGED':\n                // Update recent submissions if the changed result is in the list\n                setRecentSubmissions(prev => \n                  prev.map(item => \n                    item.id === message.data.id ? message.data : item\n                  )\n                );\n                break;\n              case 'STATS_UPDATE':\n                if (analytics) {\n                  setAnalytics(prev => prev ? { ...prev, overview: message.data } : null);\n                }\n                break;\n            }\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        };\n\n        ws.onclose = () => {\n          console.log('WebSocket disconnected');\n          setIsConnected(false);\n          // Attempt to reconnect after 3 seconds\n          setTimeout(connect, 3000);\n        };\n\n        ws.onerror = (error) => {\n          console.error('WebSocket error:', error);\n          setIsConnected(false);\n        };\n      } catch (error) {\n        console.error('Failed to create WebSocket connection:', error);\n        setTimeout(connect, 3000);\n      }\n    };\n\n    connect();\n\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, []);\n\n  const sendMessage = (message: any) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n    }\n  };\n\n  // Request analytics update\n  const requestAnalytics = useCallback(() => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify({ type: 'REQUEST_ANALYTICS' }));\n    }\n  }, []);\n\n  return {\n    isConnected,\n    lastMessage,\n    analytics,\n    recentSubmissions,\n    sendMessage,\n    requestAnalytics,\n  };\n}\n","size_bytes":3573},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/audit-trail.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { History, Shield } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport default function AuditTrail() {\n  const { user } = useAuth();\n\n  const { data: auditLogs, isLoading } = useQuery({\n    queryKey: [\"/api/audit-logs\"],\n  });\n\n  // Only admin and supervisor users can access this page\n  if (user?.role !== 'admin' && user?.role !== 'supervisor') {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6 text-center\">\n            <Shield className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Access Denied</h3>\n            <p className=\"text-gray-600\">You need supervisor or administrator privileges to access this page.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const getActionBadgeVariant = (action: string) => {\n    switch (action) {\n      case 'CREATE':\n        return 'default';\n      case 'UPDATE':\n        return 'secondary';\n      case 'DELETE':\n        return 'destructive';\n      default:\n        return 'outline';\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-gray-900\" data-testid=\"text-audit-trail-title\">\n          Audit Trail\n        </h2>\n        <p className=\"text-gray-600\">Track all system activities and changes</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <History className=\"h-5 w-5\" />\n            <span>Recent Activities</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">Loading audit logs...</div>\n          ) : auditLogs && auditLogs.length > 0 ? (\n            <div className=\"space-y-4\">\n              {auditLogs.map((log: any) => (\n                <div key={log.id} className=\"border rounded-lg p-4 hover:bg-gray-50 transition-colors\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-3 mb-2\">\n                        <Badge variant={getActionBadgeVariant(log.action)} data-testid={`badge-action-${log.id}`}>\n                          {log.action}\n                        </Badge>\n                        <span className=\"text-sm font-medium text-gray-900\" data-testid={`text-entity-${log.id}`}>\n                          {log.entityType} • {log.entityId}\n                        </span>\n                      </div>\n                      \n                      <div className=\"text-sm text-gray-600 mb-2\" data-testid={`text-user-${log.id}`}>\n                        User ID: {log.userId}\n                      </div>\n                      \n                      {log.newValues && (\n                        <div className=\"text-xs text-gray-500 bg-gray-100 p-2 rounded mt-2\">\n                          <pre className=\"whitespace-pre-wrap\">\n                            {JSON.stringify(log.newValues, null, 2)}\n                          </pre>\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div className=\"text-right text-sm text-gray-500\">\n                      <div data-testid={`text-timestamp-${log.id}`}>\n                        {format(new Date(log.createdAt), 'MMM dd, yyyy')}\n                      </div>\n                      <div>\n                        {format(new Date(log.createdAt), 'HH:mm:ss')}\n                      </div>\n                      {log.ipAddress && (\n                        <div className=\"text-xs\">\n                          IP: {log.ipAddress}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-gray-500\">\n              No audit logs found\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4357},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download, RefreshCw } from \"lucide-react\";\nimport { RealTimeAnalytics } from \"@/components/real-time-analytics\";\n\nexport default function Dashboard() {\n  // Fetch polling centers for export functionality\n  const { data: pollingCenters } = useQuery({\n    queryKey: [\"/api/polling-centers\"],\n  });\n\n  const { data: results } = useQuery({\n    queryKey: [\"/api/results\"],\n  });\n\n  const handleExportReport = () => {\n    // Comprehensive report export functionality\n    const data = {\n      timestamp: new Date().toISOString(),\n      pollingCenters: pollingCenters?.length || 0,\n      totalResults: results?.length || 0,\n      exportedBy: \"Dashboard User\",\n    };\n    \n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `election-report-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const handleRefreshData = () => {\n    window.location.reload();\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Enhanced Dashboard Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\" data-testid=\"text-dashboard-title\">\n            Real-Time Election Center\n          </h1>\n          <p className=\"text-gray-600 mt-1\">Live monitoring and analytics for election results</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button\n            variant=\"outline\"\n            onClick={handleRefreshData}\n            data-testid=\"button-refresh-data\"\n          >\n            <RefreshCw className=\"mr-2 h-4 w-4\" />\n            Refresh\n          </Button>\n          <Button\n            onClick={handleExportReport}\n            data-testid=\"button-export-report\"\n          >\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export Report\n          </Button>\n        </div>\n      </div>\n\n      {/* Real-Time Analytics Component */}\n      <RealTimeAnalytics />\n    </div>\n  );\n}","size_bytes":2268},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Vote, Shield, BarChart3, Users } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary-500 to-primary-700 flex items-center justify-center p-4\">\n      <div className=\"max-w-4xl w-full\">\n        <Card className=\"w-full max-w-md mx-auto shadow-2xl\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center mb-8\">\n              <div className=\"w-16 h-16 bg-primary-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Vote className=\"text-white h-8 w-8\" />\n              </div>\n              <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Parallel Tally Center</h1>\n              <p className=\"text-gray-600\">Secure Election Management System</p>\n            </div>\n            \n            <div className=\"space-y-4 mb-8\">\n              <div className=\"flex items-center space-x-3 text-sm text-gray-600\">\n                <Shield className=\"h-5 w-5 text-primary-500\" />\n                <span>Secure result collection and verification</span>\n              </div>\n              <div className=\"flex items-center space-x-3 text-sm text-gray-600\">\n                <BarChart3 className=\"h-5 w-5 text-primary-500\" />\n                <span>Real-time dashboard and analytics</span>\n              </div>\n              <div className=\"flex items-center space-x-3 text-sm text-gray-600\">\n                <Users className=\"h-5 w-5 text-primary-500\" />\n                <span>Multi-role access control</span>\n              </div>\n            </div>\n            \n            <Button \n              onClick={() => window.location.href = \"/login\"}\n              className=\"w-full bg-primary-500 hover:bg-primary-600 text-white font-medium py-3 transition-colors duration-200\"\n              data-testid=\"button-login\"\n            >\n              Sign In to Continue\n            </Button>\n            \n            <div className=\"mt-6 text-center\">\n              <p className=\"text-xs text-gray-500\">\n                Authorized personnel only. All activities are logged and monitored.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <div className=\"mt-8 text-center text-white\">\n          <h2 className=\"text-3xl font-bold mb-4\">Transparent Election Monitoring</h2>\n          <p className=\"text-lg opacity-90 max-w-2xl mx-auto\">\n            Collect, verify, and tally election results with confidence. \n            Real-time data collection from field agents, comprehensive verification workflows, \n            and secure audit trails ensure election integrity.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2804},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reports.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download, BarChart3, FileText, TrendingUp } from \"lucide-react\";\n\nexport default function Reports() {\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/stats\"],\n  });\n\n  const { data: results } = useQuery({\n    queryKey: [\"/api/results\"],\n  });\n\n  const handleExportCSV = () => {\n    // TODO: Implement CSV export\n    console.log(\"Exporting CSV...\");\n  };\n\n  const handleExportPDF = () => {\n    // TODO: Implement PDF export\n    console.log(\"Exporting PDF...\");\n  };\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-gray-900\" data-testid=\"text-reports-title\">\n          Reports & Analytics\n        </h2>\n        <p className=\"text-gray-600\">Generate and export comprehensive election reports</p>\n      </div>\n\n      {/* Export Options */}\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Download className=\"h-5 w-5\" />\n            <span>Export Options</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-4\">\n            <Button \n              onClick={handleExportCSV}\n              variant=\"outline\"\n              data-testid=\"button-export-csv\"\n            >\n              <FileText className=\"h-4 w-4 mr-2\" />\n              Export CSV\n            </Button>\n            <Button \n              onClick={handleExportPDF}\n              variant=\"outline\"\n              data-testid=\"button-export-pdf\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export PDF\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Summary Reports */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Overall Summary</span>\n              <BarChart3 className=\"h-5 w-5 text-primary-500\" />\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600\">Total Centers:</span>\n                <span className=\"font-medium\" data-testid=\"text-total-centers\">\n                  {stats?.totalCenters || 0}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600\">Results Received:</span>\n                <span className=\"font-medium\" data-testid=\"text-results-received\">\n                  {stats?.resultsReceived || 0}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600\">Completion Rate:</span>\n                <span className=\"font-medium text-green-600\" data-testid=\"text-completion-rate\">\n                  {stats?.completionRate?.toFixed(1) || 0}%\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Verification Status</span>\n              <TrendingUp className=\"h-5 w-5 text-green-500\" />\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600\">Verified:</span>\n                <span className=\"font-medium text-green-600\" data-testid=\"text-verified-count\">\n                  {stats?.verified || 0}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600\">Flagged:</span>\n                <span className=\"font-medium text-red-600\" data-testid=\"text-flagged-count\">\n                  {stats?.flagged || 0}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600\">Verification Rate:</span>\n                <span className=\"font-medium text-green-600\" data-testid=\"text-verification-rate\">\n                  {stats?.verificationRate?.toFixed(1) || 0}%\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Activity</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-sm text-gray-600\">\n              Last 24 hours: {results?.filter(r => {\n                const yesterday = new Date();\n                yesterday.setDate(yesterday.getDate() - 1);\n                return new Date(r.createdAt) > yesterday;\n              }).length || 0} new submissions\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5185},"client/src/pages/submit-results.tsx":{"content":"import ResultSubmissionForm from \"@/components/result-submission-form\";\n\nexport default function SubmitResults() {\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-gray-900\" data-testid=\"text-submit-results-title\">\n          Submit Results\n        </h2>\n        <p className=\"text-gray-600\">Enter polling center results and upload verification documents</p>\n      </div>\n\n      <ResultSubmissionForm />\n    </div>\n  );\n}\n","size_bytes":469},"client/src/pages/user-management.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Users, Shield } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nexport default function UserManagement() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const { data: users, isLoading } = useQuery({\n    queryKey: [\"/api/users\"],\n  });\n\n  const updateRoleMutation = useMutation({\n    mutationFn: async ({ userId, role }: { userId: string; role: string }) => {\n      await apiRequest(\"PATCH\", `/api/users/${userId}/role`, { role });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User role updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Only admin users can access this page\n  if (user?.role !== 'admin') {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"pt-6 text-center\">\n            <Shield className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Access Denied</h3>\n            <p className=\"text-gray-600\">You need administrator privileges to access this page.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const getRoleBadgeVariant = (role: string) => {\n    switch (role) {\n      case 'admin':\n        return 'destructive';\n      case 'supervisor':\n        return 'default';\n      case 'agent':\n        return 'secondary';\n      default:\n        return 'outline';\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-gray-900\" data-testid=\"text-user-management-title\">\n          User Management\n        </h2>\n        <p className=\"text-gray-600\">Manage user roles and permissions</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Users className=\"h-5 w-5\" />\n            <span>System Users</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"text-center py-8\">Loading users...</div>\n          ) : (\n            <div className=\"space-y-4\">\n              {users?.map((user: any) => (\n                <div key={user.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div className=\"flex items-center space-x-4\">\n                    <img\n                      src={user.profileImageUrl || `https://ui-avatars.com/api/?name=${user.firstName}+${user.lastName}&background=1565c0&color=fff`}\n                      alt=\"Avatar\"\n                      className=\"w-10 h-10 rounded-full\"\n                    />\n                    <div>\n                      <div className=\"font-medium text-gray-900\" data-testid={`text-user-name-${user.id}`}>\n                        {user.firstName} {user.lastName}\n                      </div>\n                      <div className=\"text-sm text-gray-500\" data-testid={`text-user-email-${user.id}`}>\n                        {user.email}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-4\">\n                    <Badge variant={getRoleBadgeVariant(user.role)} data-testid={`badge-user-role-${user.id}`}>\n                      {user.role}\n                    </Badge>\n                    \n                    <Select\n                      value={user.role}\n                      onValueChange={(role) => updateRoleMutation.mutate({ userId: user.id, role })}\n                      disabled={updateRoleMutation.isPending}\n                    >\n                      <SelectTrigger className=\"w-32\" data-testid={`select-role-${user.id}`}>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"agent\">Agent</SelectItem>\n                        <SelectItem value=\"supervisor\">Supervisor</SelectItem>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5318},"client/src/pages/verify-results.tsx":{"content":"import VerificationInterface from \"@/components/verification-interface\";\n\nexport default function VerifyResults() {\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-gray-900\" data-testid=\"text-verify-results-title\">\n          Verify Results\n        </h2>\n        <p className=\"text-gray-600\">Review and verify submitted results</p>\n      </div>\n\n      <VerificationInterface />\n    </div>\n  );\n}\n","size_bytes":444},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1126},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }","size_bytes":775},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Vote, Eye, EyeOff } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface LoginData {\n  identifier: string;\n  password: string;\n}\n\ninterface RegisterData {\n  email: string;\n  phone: string;\n  firstName: string;\n  lastName: string;\n  password: string;\n  confirmPassword: string;\n}\n\nexport default function Login() {\n  const { user, isLoading } = useAuth();\n  const [loginData, setLoginData] = useState<LoginData>({\n    identifier: \"\",\n    password: \"\",\n  });\n  const [registerData, setRegisterData] = useState<RegisterData>({\n    email: \"\",\n    phone: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Redirect if already logged in\n  if (!isLoading && user) {\n    window.location.href = \"/\";\n    return null;\n  }\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n    setIsSubmitting(true);\n\n    try {\n      const response = await fetch(\"/api/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(loginData),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        window.location.href = \"/\";\n      } else {\n        setError(data.message || \"Login failed\");\n      }\n    } catch (error) {\n      setError(\"Network error. Please try again.\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n    setIsSubmitting(true);\n\n    if (registerData.password !== registerData.confirmPassword) {\n      setError(\"Passwords do not match\");\n      setIsSubmitting(false);\n      return;\n    }\n\n    if (!registerData.email && !registerData.phone) {\n      setError(\"Either email or phone number is required\");\n      setIsSubmitting(false);\n      return;\n    }\n\n    try {\n      const response = await fetch(\"/api/register\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          email: registerData.email || undefined,\n          phone: registerData.phone || undefined,\n          firstName: registerData.firstName,\n          lastName: registerData.lastName,\n          password: registerData.password,\n        }),\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        setSuccess(\"Registration successful! You can now log in.\");\n        setRegisterData({\n          email: \"\",\n          phone: \"\",\n          firstName: \"\",\n          lastName: \"\",\n          password: \"\",\n          confirmPassword: \"\",\n        });\n      } else {\n        setError(data.message || \"Registration failed\");\n      }\n    } catch (error) {\n      setError(\"Network error. Please try again.\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary-500 to-primary-700 flex items-center justify-center p-4\">\n      <div className=\"max-w-md w-full\">\n        <Card className=\"shadow-2xl\">\n          <CardHeader className=\"text-center\">\n            <div className=\"w-16 h-16 bg-primary-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Vote className=\"text-white h-8 w-8\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">\n              Parallel Tally Center\n            </CardTitle>\n            <p className=\"text-gray-600\">Secure Election Management System</p>\n          </CardHeader>\n          <CardContent>\n            {error && (\n              <Alert className=\"mb-4 border-red-200 bg-red-50\">\n                <AlertDescription className=\"text-red-700\">\n                  {error}\n                </AlertDescription>\n              </Alert>\n            )}\n            {success && (\n              <Alert className=\"mb-4 border-green-200 bg-green-50\">\n                <AlertDescription className=\"text-green-700\">\n                  {success}\n                </AlertDescription>\n              </Alert>\n            )}\n\n            <Tabs defaultValue=\"login\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"login\">Sign In</TabsTrigger>\n                <TabsTrigger value=\"register\">Register</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"login\" className=\"space-y-4\">\n                <form onSubmit={handleLogin} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"identifier\">Email or Phone Number</Label>\n                    <Input\n                      id=\"identifier\"\n                      type=\"text\"\n                      placeholder=\"Enter your email or phone number\"\n                      value={loginData.identifier}\n                      onChange={(e) =>\n                        setLoginData({\n                          ...loginData,\n                          identifier: e.target.value,\n                        })\n                      }\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"password\">Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"password\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Enter your password\"\n                        value={loginData.password}\n                        onChange={(e) =>\n                          setLoginData({\n                            ...loginData,\n                            password: e.target.value,\n                          })\n                        }\n                        required\n                      />\n                      <button\n                        type=\"button\"\n                        className=\"absolute right-3 top-3 text-gray-500 hover:text-gray-700\"\n                        onClick={() => setShowPassword(!showPassword)}\n                      >\n                        {showPassword ? (\n                          <EyeOff className=\"h-4 w-4\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4\" />\n                        )}\n                      </button>\n                    </div>\n                  </div>\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={isSubmitting}\n                  >\n                    {isSubmitting ? \"Signing in...\" : \"Sign In\"}\n                  </Button>\n                </form>\n              </TabsContent>\n\n              <TabsContent value=\"register\" className=\"space-y-4\">\n                <form onSubmit={handleRegister} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    <div>\n                      <Label htmlFor=\"firstName\">First Name</Label>\n                      <Input\n                        id=\"firstName\"\n                        type=\"text\"\n                        placeholder=\"First name\"\n                        value={registerData.firstName}\n                        onChange={(e) =>\n                          setRegisterData({\n                            ...registerData,\n                            firstName: e.target.value,\n                          })\n                        }\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"lastName\">Last Name</Label>\n                      <Input\n                        id=\"lastName\"\n                        type=\"text\"\n                        placeholder=\"Last name\"\n                        value={registerData.lastName}\n                        onChange={(e) =>\n                          setRegisterData({\n                            ...registerData,\n                            lastName: e.target.value,\n                          })\n                        }\n                        required\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"email\">Email (Optional)</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"your.email@example.com\"\n                      value={registerData.email}\n                      onChange={(e) =>\n                        setRegisterData({\n                          ...registerData,\n                          email: e.target.value,\n                        })\n                      }\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"phone\">Phone Number (Optional)</Label>\n                    <Input\n                      id=\"phone\"\n                      type=\"tel\"\n                      placeholder=\"+265XXXXXXXXXX\"\n                      value={registerData.phone}\n                      onChange={(e) =>\n                        setRegisterData({\n                          ...registerData,\n                          phone: e.target.value,\n                        })\n                      }\n                    />\n                  </div>\n                  <p className=\"text-sm text-gray-600\">\n                    At least one of email or phone is required\n                  </p>\n                  <div>\n                    <Label htmlFor=\"registerPassword\">Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"registerPassword\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Create a strong password\"\n                        value={registerData.password}\n                        onChange={(e) =>\n                          setRegisterData({\n                            ...registerData,\n                            password: e.target.value,\n                          })\n                        }\n                        required\n                        minLength={8}\n                      />\n                      <button\n                        type=\"button\"\n                        className=\"absolute right-3 top-3 text-gray-500 hover:text-gray-700\"\n                        onClick={() => setShowPassword(!showPassword)}\n                      >\n                        {showPassword ? (\n                          <EyeOff className=\"h-4 w-4\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4\" />\n                        )}\n                      </button>\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                    <div className=\"relative\">\n                      <Input\n                        id=\"confirmPassword\"\n                        type={showConfirmPassword ? \"text\" : \"password\"}\n                        placeholder=\"Confirm your password\"\n                        value={registerData.confirmPassword}\n                        onChange={(e) =>\n                          setRegisterData({\n                            ...registerData,\n                            confirmPassword: e.target.value,\n                          })\n                        }\n                        required\n                        minLength={8}\n                      />\n                      <button\n                        type=\"button\"\n                        className=\"absolute right-3 top-3 text-gray-500 hover:text-gray-700\"\n                        onClick={() =>\n                          setShowConfirmPassword(!showConfirmPassword)\n                        }\n                      >\n                        {showConfirmPassword ? (\n                          <EyeOff className=\"h-4 w-4\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4\" />\n                        )}\n                      </button>\n                    </div>\n                  </div>\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={isSubmitting}\n                  >\n                    {isSubmitting ? \"Creating account...\" : \"Create Account\"}\n                  </Button>\n                </form>\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-xs text-gray-500\">\n                Authorized personnel only. All activities are logged and\n                monitored.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13351},"server/auth.ts":{"content":"import bcrypt from \"bcrypt\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\nimport { loginSchema, registerUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst SALT_ROUNDS = 12;\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: true,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, SALT_ROUNDS);\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Configure local strategy\n  passport.use(new LocalStrategy(\n    {\n      usernameField: 'identifier',\n      passwordField: 'password'\n    },\n    async (identifier, password, done) => {\n      try {\n        const user = await storage.getUserByIdentifier(identifier);\n        \n        if (!user) {\n          return done(null, false, { message: 'Invalid credentials' });\n        }\n\n        const isValid = await verifyPassword(password, user.passwordHash);\n        if (!isValid) {\n          return done(null, false, { message: 'Invalid credentials' });\n        }\n\n        if (!user.isActive) {\n          return done(null, false, { message: 'Account is disabled' });\n        }\n\n        if (!user.isApproved) {\n          return done(null, false, { message: 'Account pending approval' });\n        }\n\n        // Update last login\n        await storage.updateLastLogin(user.id);\n\n        return done(null, user);\n      } catch (error) {\n        return done(error);\n      }\n    }\n  ));\n\n  passport.serializeUser((user: any, cb) => {\n    cb(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: string, cb) => {\n    try {\n      const user = await storage.getUser(id);\n      cb(null, user);\n    } catch (error) {\n      cb(error);\n    }\n  });\n}\n\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Unauthorized\" });\n};\n\n// Validation schemas\nexport const validateRegister = (data: unknown) => {\n  return registerUserSchema.parse(data);\n};\n\nexport const validateLogin = (data: unknown) => {\n  return loginSchema.parse(data);\n};","size_bytes":3018},"server/seed.ts":{"content":"import { storage } from \"./storage\";\nimport { hashPassword } from \"./auth\";\n\nexport async function seedDatabase() {\n  try {\n    console.log(\"🌱 Starting database seeding...\");\n\n    // Check if admin user already exists\n    const existingAdmin = await storage.getUserByIdentifier(\"admin@ptcsystem.com\");\n    \n    if (!existingAdmin) {\n      // Create default admin user\n      const adminPasswordHash = await hashPassword(\"admin123!\");\n      \n      const adminUser = await storage.createUser({\n        email: \"admin@ptcsystem.com\",\n        firstName: \"System\",\n        lastName: \"Administrator\",\n        passwordHash: adminPasswordHash,\n      });\n      \n      // Set admin role and approve user\n      await storage.updateUserRole(adminUser.id, \"admin\");\n      await storage.approveUser(adminUser.id);\n      console.log(\"✓ Created default admin user: admin@ptcsystem.com / admin123!\");\n    } else {\n      console.log(\"✓ Admin user already exists\");\n    }\n\n    // Check if candidates already exist\n    const existingCandidates = await storage.getCandidates();\n    \n    if (existingCandidates.length === 0) {\n      // Create presidential candidates\n      await storage.createCandidate({\n        name: \"John Presidential\",\n        party: \"Democratic Progressive Party (DPP)\",\n        category: \"president\",\n      });\n\n      await storage.createCandidate({\n        name: \"Mary National\", \n        party: \"People's Liberation Party (PLP)\",\n        category: \"president\",\n      });\n\n      await storage.createCandidate({\n        name: \"Samuel Unity\",\n        party: \"Unity Development Alliance (UDA)\", \n        category: \"president\",\n      });\n\n      // Create MP candidates\n      await storage.createCandidate({\n        name: \"David Mchazime\",\n        party: \"Malawi Congress Party (MCP)\",\n        category: \"mp\",\n        constituency: \"Lilongwe City Centre\",\n      });\n\n      await storage.createCandidate({\n        name: \"Sarah Banda\",\n        party: \"Democratic Progressive Party (DPP)\",\n        category: \"mp\",\n        constituency: \"Lilongwe City Centre\", \n      });\n\n      await storage.createCandidate({\n        name: \"Michael Phiri\",\n        party: \"United Democratic Front (UDF)\",\n        category: \"mp\",\n        constituency: \"Blantyre City South\",\n      });\n\n      // Create Councilor candidates\n      await storage.createCandidate({\n        name: \"Grace Mwale\",\n        party: \"Malawi Congress Party (MCP)\", \n        category: \"councilor\",\n        constituency: \"Lilongwe Ward 1\",\n      });\n\n      await storage.createCandidate({\n        name: \"Peter Kachali\",\n        party: \"Democratic Progressive Party (DPP)\",\n        category: \"councilor\",\n        constituency: \"Blantyre Ward 2\",\n      });\n\n      await storage.createCandidate({\n        name: \"Ruth Ngwira\",\n        party: \"United Democratic Front (UDF)\",\n        category: \"councilor\", \n        constituency: \"Mzuzu Ward 3\",\n      });\n\n      console.log(\"✓ Created candidates for President, MP, and Councilor positions\");\n    } else {\n      console.log(\"✓ Candidates already exist\");\n    }\n\n    // Check if polling centers exist\n    const existingCenters = await storage.getPollingCenters();\n    \n    if (existingCenters.length === 0) {\n      // Create sample polling centers\n      await storage.createPollingCenter({\n        code: \"PC001\",\n        name: \"Lilongwe Primary School\",\n        constituency: \"Lilongwe City Centre\",\n        district: \"Lilongwe\",\n        state: \"Central Region\",\n        registeredVoters: 1250,\n      });\n\n      await storage.createPollingCenter({\n        code: \"PC002\", \n        name: \"Blantyre Community Hall\",\n        constituency: \"Blantyre City South\",\n        district: \"Blantyre\",\n        state: \"Southern Region\",\n        registeredVoters: 980,\n      });\n\n      await storage.createPollingCenter({\n        code: \"PC003\",\n        name: \"Mzuzu Secondary School\",\n        constituency: \"Mzuzu City\",\n        district: \"Mzuzu\",\n        state: \"Northern Region\",\n        registeredVoters: 1450,\n      });\n\n      console.log(\"✓ Created sample polling centers\");\n    } else {\n      console.log(\"✓ Polling centers already exist\");\n    }\n\n    console.log(\"🎉 Database seeding completed successfully!\");\n    \n    return {\n      success: true,\n      message: \"Database seeded successfully\",\n      adminCredentials: {\n        email: \"admin@ptcsystem.com\",\n        password: \"admin123!\"\n      }\n    };\n    \n  } catch (error) {\n    console.error(\"❌ Database seeding failed:\", error);\n    throw error;\n  }\n}\n\n// Auto-seed if this file is run directly\nif (process.argv[1].includes('seed.ts')) {\n  seedDatabase()\n    .then(() => process.exit(0))\n    .catch(() => process.exit(1));\n}","size_bytes":4680},"client/src/pages/admin-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Users, UserCheck, Building, Vote, MapPin } from \"lucide-react\";\n\nexport default function AdminManagement() {\n  const { toast } = useToast();\n  const [selectedCategory, setSelectedCategory] = useState(\"president\");\n\n  // Fetch pending users\n  const { data: pendingUsers } = useQuery({\n    queryKey: [\"/api/admin/pending-users\"],\n  });\n\n  // Fetch candidates\n  const { data: candidates } = useQuery({\n    queryKey: [\"/api/candidates\"],\n  });\n\n  // Fetch polling centers\n  const { data: pollingCenters } = useQuery({\n    queryKey: [\"/api/polling-centers\"],\n  });\n\n  // Approve user mutation\n  const approveUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const res = await apiRequest(\"POST\", `/api/admin/approve-user/${userId}`);\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"User approved successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/pending-users\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to approve user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Add candidate mutation\n  const addCandidateMutation = useMutation({\n    mutationFn: async (candidateData: any) => {\n      const res = await apiRequest(\"POST\", \"/api/candidates\", candidateData);\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Candidate added successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/candidates\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add candidate\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Add polling center mutation\n  const addPollingCenterMutation = useMutation({\n    mutationFn: async (centerData: any) => {\n      const res = await apiRequest(\"POST\", \"/api/polling-centers\", centerData);\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Polling center added successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/polling-centers\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add polling center\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleApproveUser = (userId: string) => {\n    approveUserMutation.mutate(userId);\n  };\n\n  const handleAddCandidate = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget);\n    \n    const candidateData = {\n      name: formData.get('candidateName'),\n      party: formData.get('candidateParty'),\n      category: selectedCategory,\n      constituency: formData.get('candidateConstituency'),\n    };\n\n    addCandidateMutation.mutate(candidateData);\n    event.currentTarget.reset();\n  };\n\n  const handleAddPollingCenter = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const formData = new FormData(event.currentTarget);\n    \n    const centerData = {\n      code: formData.get('centerCode'),\n      name: formData.get('centerName'),\n      constituency: formData.get('centerConstituency'),\n      district: formData.get('centerDistrict'),\n      state: formData.get('centerState'),\n      registeredVoters: parseInt(formData.get('registeredVoters') as string),\n    };\n\n    addPollingCenterMutation.mutate(centerData);\n    event.currentTarget.reset();\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-2xl font-bold text-gray-900\" data-testid=\"text-admin-management-title\">\n          Admin Management\n        </h1>\n        <p className=\"text-gray-600\">\n          Manage user approvals, candidates, parties, and polling centers\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"users\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"users\" data-testid=\"tab-users\">\n            <Users className=\"w-4 h-4 mr-2\" />\n            Users\n          </TabsTrigger>\n          <TabsTrigger value=\"candidates\" data-testid=\"tab-candidates\">\n            <Vote className=\"w-4 h-4 mr-2\" />\n            Candidates\n          </TabsTrigger>\n          <TabsTrigger value=\"centers\" data-testid=\"tab-centers\">\n            <Building className=\"w-4 h-4 mr-2\" />\n            Polling Centers\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"users\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <UserCheck className=\"w-5 h-5\" />\n                Pending User Approvals\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {!pendingUsers || pendingUsers.length === 0 ? (\n                <p className=\"text-gray-500\" data-testid=\"text-no-pending-users\">\n                  No pending user approvals\n                </p>\n              ) : (\n                <div className=\"space-y-3\">\n                  {pendingUsers && Array.isArray(pendingUsers) && pendingUsers.map((user: any) => (\n                    <div key={user.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div>\n                        <p className=\"font-medium\" data-testid={`text-user-name-${user.id}`}>\n                          {user.firstName} {user.lastName}\n                        </p>\n                        <p className=\"text-sm text-gray-600\" data-testid={`text-user-contact-${user.id}`}>\n                          {user.email || user.phone}\n                        </p>\n                        <Badge variant=\"outline\" className=\"mt-1\">\n                          {user.role}\n                        </Badge>\n                      </div>\n                      <Button\n                        onClick={() => handleApproveUser(user.id)}\n                        disabled={approveUserMutation.isPending}\n                        data-testid={`button-approve-${user.id}`}\n                      >\n                        {approveUserMutation.isPending ? \"Approving...\" : \"Approve\"}\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"candidates\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Add New Candidate</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleAddCandidate} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <Input\n                    name=\"candidateName\"\n                    placeholder=\"Candidate Name\"\n                    required\n                    data-testid=\"input-candidate-name\"\n                  />\n                  <Input\n                    name=\"candidateParty\"\n                    placeholder=\"Party Name\"\n                    required\n                    data-testid=\"input-candidate-party\"\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                    <SelectTrigger data-testid=\"select-candidate-category\">\n                      <SelectValue placeholder=\"Select category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"president\">Presidential</SelectItem>\n                      <SelectItem value=\"mp\">Member of Parliament</SelectItem>\n                      <SelectItem value=\"councilor\">Councilor</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  \n                  {(selectedCategory === \"mp\" || selectedCategory === \"councilor\") && (\n                    <Input\n                      name=\"candidateConstituency\"\n                      placeholder=\"Constituency/Ward\"\n                      required\n                      data-testid=\"input-candidate-constituency\"\n                    />\n                  )}\n                </div>\n\n                <Button type=\"submit\" disabled={addCandidateMutation.isPending} data-testid=\"button-add-candidate\">\n                  {addCandidateMutation.isPending ? \"Adding...\" : \"Add Candidate\"}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Current Candidates</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {candidates && Array.isArray(candidates) && candidates.map((candidate: any) => (\n                  <div key={candidate.id} className=\"flex items-center justify-between p-3 border rounded\">\n                    <div>\n                      <p className=\"font-medium\">{candidate.name}</p>\n                      <p className=\"text-sm text-gray-600\">{candidate.party}</p>\n                      <div className=\"flex gap-2 mt-1\">\n                        <Badge variant=\"secondary\">{candidate.category}</Badge>\n                        {candidate.constituency && (\n                          <Badge variant=\"outline\">{candidate.constituency}</Badge>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"centers\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MapPin className=\"w-5 h-5\" />\n                Add New Polling Center\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleAddPollingCenter} className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <Input\n                    name=\"centerCode\"\n                    placeholder=\"Center Code (e.g., PC004)\"\n                    required\n                    data-testid=\"input-center-code\"\n                  />\n                  <Input\n                    name=\"centerName\"\n                    placeholder=\"Center Name\"\n                    required\n                    data-testid=\"input-center-name\"\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <Input\n                    name=\"centerConstituency\"\n                    placeholder=\"Constituency\"\n                    required\n                    data-testid=\"input-center-constituency\"\n                  />\n                  <Input\n                    name=\"centerDistrict\"\n                    placeholder=\"District\"\n                    required\n                    data-testid=\"input-center-district\"\n                  />\n                  <Input\n                    name=\"centerState\"\n                    placeholder=\"Region\"\n                    required\n                    data-testid=\"input-center-region\"\n                  />\n                </div>\n\n                <Input\n                  name=\"registeredVoters\"\n                  type=\"number\"\n                  placeholder=\"Registered Voters\"\n                  required\n                  data-testid=\"input-registered-voters\"\n                />\n\n                <Button type=\"submit\" disabled={addPollingCenterMutation.isPending} data-testid=\"button-add-center\">\n                  {addPollingCenterMutation.isPending ? \"Adding...\" : \"Add Polling Center\"}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Current Polling Centers</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {pollingCenters && Array.isArray(pollingCenters) && pollingCenters.map((center: any) => (\n                  <div key={center.id} className=\"flex items-center justify-between p-3 border rounded\">\n                    <div>\n                      <p className=\"font-medium\">{center.code} - {center.name}</p>\n                      <p className=\"text-sm text-gray-600\">\n                        {center.constituency}, {center.district}, {center.state}\n                      </p>\n                      <p className=\"text-sm text-blue-600\">\n                        {center.registeredVoters} registered voters\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":13581}},"version":1}